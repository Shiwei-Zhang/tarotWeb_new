/*
 * Released under BSD License
 * Copyright (c) 2014-2015 hizzgdev@163.com
 * 
 * Project Home:
 *   https://github.com/hizzgdev/jsmind/
 */

(function($w){
    'use strict';
    var $d = $w.document;
    var __name__ = 'jsMind';
    var jsMind = $w[__name__];
    if(!jsMind){return;}
    if(typeof jsMind.draggable != 'undefined'){return;}

    var jdom = jsMind.util.dom;
    var jcanvas = jsMind.util.canvas;

    var clear_selection = 'getSelection' in $w ? function(){
         $w.getSelection().removeAllRanges();
    } : function(){
         $d.selection.empty();
    };

    var options = {
        line_width : 3,
        lookup_delay : 500,
        lookup_interval : 50
    };

    jsMind.draggable = function(jm){
        this.jm = jm;
        this.e_canvas = null;
        this.canvas_ctx = null;
        this.shadow = null;
        this.shadow_w = 0;
        this.shadow_h = 0;
        this.show_tip = null;
        this.show_tip2 = null;
        this.show_tip3 = null;
        this.active_node = null;
        this.target_node = null;
        this.target_direct = null;
        this.client_w = 0;
        this.client_h = 0;
        this.offset_x = 0;
        this.offset_y = 0;
        this.hlookup_delay = 0;
        this.hlookup_timer = 0;
        this.capture = false;
        this.moved = false;
        this.volumn = 0;
        this.volumn_ = 0;
        this.errorType = 0;
    };

    jsMind.draggable.prototype = {
        init:function(){
            this._create_canvas();
            this._create_shadow();
            this._create_tip();
            this._event_bind();
        },

        resize:function(){
            this.jm.view.e_nodes.appendChild(this.shadow);
            this.e_canvas.width=this.jm.view.size.w;
            this.e_canvas.height=this.jm.view.size.h;
            this.jm.view.e_nodes.appendChild(this.show_tip);
            $(this.jm.view.e_nodes).append($(this.show_tip2));
            $(this.jm.view.e_nodes).append($(this.show_tip3));
            $(this.show_tip3).tipso({
        		useTitle: false,
        		speed:0,
        		position:'top',
        		width:100,
        		offsetX:-30,
        		offsetY:-40,
        		background: '#56b0e2',
        		color: 'white',
        		content:'abcde'
        	});
        },

        _create_canvas:function(){
            var c = $d.createElement('canvas');
            //暂时先这么定义
            var container = this.jm.options.container;
            c.setAttribute('id','canvas_'+container);
            this.jm.view.e_panel.appendChild(c);
            var ctx = c.getContext('2d');
            this.e_canvas = c;
            this.canvas_ctx = ctx;
        },

        _create_shadow:function(){
            var s = $d.createElement('jmnode');
            s.style.visibility = 'hidden';
            s.style.zIndex = '3';
            s.style.cursor = 'move';
            s.style.opacity= '0.7';
            var container = this.jm.options.container;
            s.setAttribute('nodeid','shadow_'+container);
            this.shadow = s;
        },

        _create_tip:function(){
        	var container = this.jm.options.container;
        	var showTip = $d.createElement('div');
            showTip.style.visibility = 'hidden';
            showTip.className='listContent';
            showTip.setAttribute('id','showTip_'+container);
        	if(container=="jsmind_container"){
        		showTip.innerHTML='<p actionType="1">断点</p>'+
                '<p actionType="2">监控数据</p>'+
                '<p actionType="3">数据出口</p>'+
                '<p actionType="4">删除节点</p>'+
                '<p actionType="5">删除分支</p>';
        	}else{
        		showTip.innerHTML='';
        		var showTip2 = $d.createElement('div');
                showTip2.style.visibility = 'hidden';
                showTip2.className='listContent';
                showTip2.setAttribute('id','showTip_'+container+'_2');
                showTip2.innerHTML='<p actionType="4">删除节点</p>'+
                '<p actionType="5">删除分支</p>';
                this.show_tip2 = showTip2;
                var showTip3 = $d.createElement('div');
                showTip3.className='listContent';
                showTip3.style.visibility = 'hidden';
                showTip3.setAttribute('id','showTip_'+container+'_3');
                this.show_tip3 = showTip3;
        	}
            this.show_tip = showTip;
        },
        
        reset_shadow:function(el){
            var s = this.shadow.style;
            this.shadow.innerHTML = el.innerHTML;
            s.left = el.style.left;
            s.top = el.style.top;
            this.shadow_w = this.shadow.clientWidth;
            this.shadow_h = this.shadow.clientHeight;
        },

        show_shadow:function(){
            if(!this.moved){
                this.shadow.style.visibility = 'visible';
            }
        },

        hide_shadow:function(){
        	this.shadow.innerHTML = "";
            this.shadow.style.visibility = 'hidden';
        },

        clear_lines:function(){
            jcanvas.clear(this.canvas_ctx, 0, 0, this.jm.view.size.w, this.jm.view.size.h);
        },

        _magnet_shadow:function(node,strokeStyle){
            if(!!node){
                this.canvas_ctx.lineWidth = options.line_width;
                this.canvas_ctx.strokeStyle = strokeStyle;
                this.canvas_ctx.lineCap = 'round';
                this.clear_lines();
                jcanvas.lineto(this.canvas_ctx,
                    node.sp.x,
                    node.sp.y,
                    node.np.x,
                    node.np.y);
            }
        },

        _lookup_close_node:function(){
            var root = this.jm.get_root();
            var root_location = root.get_location();
            var root_size = root.get_size();
            var root_x = root_location.x + root_size.w/2;

            var sw = this.shadow_w;
            var sh = this.shadow_h;
            var sx = this.shadow.offsetLeft;
            var sy = this.shadow.offsetTop;
            var ns,nl;

            //var direct = (sx + sw/2)>=root_x ?
            //                jsMind.direction.right : jsMind.direction.left;
            var direct = sx>=root_location.x-100 ?
                    jsMind.direction.right : jsMind.direction.left;
            var nodes = this.jm.mind.nodes;
            var node = null;
            var min_distance = Number.MAX_VALUE;
            var distance = 0;
            var closest_node = null;
            var closest_p = null;
            var shadow_p = null;
            for(var nodeid in nodes){
                var np,sp;
                node = nodes[nodeid];
                //if(node.isroot || node.direction == direct){
                    if(node.id == this.active_node.id){
                        continue;
                    }
                    ns = node.get_size();
                    nl = node.get_location();
                    if(direct == jsMind.direction.right){
                		if(sx-nl.x-ns.w<=0){continue;}
                        distance = Math.abs(sx-nl.x-ns.w) + Math.abs(sy+sh/2-nl.y-ns.h/2);
                        np = {x:nl.x+ns.w-options.line_width,y:nl.y+ns.h/2};
                        sp = {x:sx+options.line_width,y:sy+sh/2};
                    }else{
                        if(nl.x-sx-sw<=0){continue;}
                        distance = Math.abs(sx+sw-nl.x) + Math.abs(sy+sh/2-nl.y-ns.h/2);
                        np = {x:nl.x+options.line_width,y:nl.y+ns.h/2};
                        sp = {x:sx+sw-options.line_width,y:sy+sh/2};
                    }
                    if(distance < min_distance){
                    	if(direct==jsMind.direction.right&&(node.isroot||this.active_node.children.length!=0)){
                    		
                    	}else{
                    		closest_node = node;
                            closest_p = np;
                            shadow_p = sp;
                            min_distance = distance;
                    	}
                    }
                //}
            }
            var result_node = null;
            if(!!closest_node){
                result_node = {
                    node:closest_node,
                    direction:direct,
                    sp:shadow_p,
                    np:closest_p
                };
            }
            return result_node;
        },

        lookup_close_node:function(){
            var node_data = this._lookup_close_node();
            if(!!node_data){
            	this.target_node = node_data.node;
				this.target_direct = node_data.direction;
				//避免父节点变子节点
				if(!!this.target_node && !!this.active_node && !jsMind.node.inherited(this.active_node, this.target_node)){
					//flag为true则出现磁铁线，false则不出现
					var flag=true;
					var shadow_h = this.shadow.offsetTop;
					var shadow_w = this.shadow.offsetLeft;
	                var sibling_nodes = this.target_node.children;
	                var sc = sibling_nodes.length;
	                var node = null;
	                var delta_y = Number.MAX_VALUE;
	                var node_before = null;
	                var src_node = this.active_node;
	                while(sc--){
	                    node = sibling_nodes[sc];
	                    //var nodeWidth = node._data.view.width;
	                    if(node.id != src_node.id){
	                        var dy = node.get_location().y - shadow_h;
	                        var dx = node.get_location().x - shadow_w;
	                        if(dy<10 && dy>-10&&dx<20&&dx>-20&&this.target_node.isroot){
	                        	//这里定义式样
	                        	$($("jmnode[nodeid='"+node.id+"']")[0]).addClass("selected");
	                        	//暂时先都出现磁铁线
	                        	//flag=false;
	                        }else{
	                        	$($("jmnode[nodeid='"+node.id+"']")[0]).removeClass("selected");
	                        	if(dy > 0 && dy < delta_y){
	                                node_before = node;
	                            }
	                        }
	                    }
	                }
	                if(!this.target_node.isroot){
	                	var strokeStyle = 'rgba(0,0,0,0.3)';
	                	this.errorType = 0;
		                if(this.jm.options.container=="jsmind_container2"){
		                	var selected_node = this.jm.get_selected_node();
		                	if(this.target_direct==jsMind.direction.right){
		                		if(this.active_node.data.level==4){
			                		strokeStyle = error_color;
			                		this.errorType = 201;
			                	}else if(this.active_node.data.functionType==2){
			                		strokeStyle = error_color;
			                		this.errorType = 202;
			                	}else if(this.active_node.data.paramNumber==0){
			                		strokeStyle = error_color;
			                		this.errorType = 203;
			                	}else{
					                var columnType = this.target_node.data.columnType;
					                var functionName = this.active_node.data.functionName;
					                var parameters = functionsMap.get(functionName);
				                	var paramDataType = parameters[0].paramDataType;
				                	if(columnType!=paramDataType){
				                		var newArray = $.grep( conversionRules_global, function(n,i){
				                    		return n.theType==columnType&&n.depType==paramDataType&&n.type==1;
				             			});
				                    	if(newArray.length==0){
				                    		strokeStyle = error_color;
				                    		this.errorType = 207;
				                    	}
				                	}
			                	}
		                	}else{
		                		if(this.target_node.data.level==4){
			                		strokeStyle = error_color;
			                		this.errorType = 204;
			                	}else if(this.target_node.data.functionType==2){
			                		strokeStyle = error_color;
			                		this.errorType = 205;
		                		}else if(this.target_node.data.fixed==1&&this.target_node.data.paramNumber==sibling_nodes.length&&selected_node.parent!=this.target_node){
			                		strokeStyle = error_color;
			                		this.errorType = 206;
		                		}else{
				                	var paramIndex = 0;
				                	if(!!node_before){
			                    		paramIndex = node_before.index-1;
			                    		if(selected_node.parent==this.target_node&&selected_node.index<node_before.index){
			                    			paramIndex-=1;
			                    		}
			                		}else{
			                			paramIndex = sibling_nodes.length;
			                			if(selected_node.parent==this.target_node){
			                				paramIndex-=1;
			                			}
			                		}
					                var columnType = selected_node.data.columnType;
					                var functionName = this.target_node.data.functionName;
					                var parameters = functionsMap.get(functionName);
				                	var paramDataType = parameters[paramIndex].paramDataType;
				                	if(columnType!=paramDataType){
				                		var newArray = $.grep( conversionRules_global, function(n,i){
				                    		return n.theType==columnType&&n.depType==paramDataType&&n.type==1;
				             			});
				                    	if(newArray.length==0){
				                    		strokeStyle = error_color;
				                    		this.errorType = 207;
				                    	}
				                	}
			                	}
		                	}
		                }else{
		                	if(this.target_direct==jsMind.direction.right&&this.active_node.data.level==2){
		                		strokeStyle = error_color;
		                		this.errorType = 101;
		                	}
		                	if(this.target_direct==jsMind.direction.left&&this.target_node.data.level==2){
		                		strokeStyle = error_color;
		                		this.errorType = 102;
		                	}
		                }
						this._magnet_shadow(node_data,strokeStyle);
					}else{
						this.errorType = 0;
						this.clear_lines();
					} 
				}else{
					this.errorType = 0;
					this.clear_lines();
				}
            }
        },

        _event_bind:function(){
            var jd = this;
            var container = this.jm.view.container;
            jdom.add_event(container,'mousedown',function(e){
                var evt = e || event;
                jd.dragstart.call(jd,evt);
            });
            jdom.add_event(container,'mousemove',function(e){
                var evt = e || event;
                jd.drag.call(jd,evt);
            });
            jdom.add_event(container,'mouseup',function(e){
                var evt = e || event;
                jd.dragend.call(jd,evt);
            });
        },

        dragstart:function(e){
            if(!this.jm.get_editable()){return;}
            if(this.capture){return;}
            this.active_node = null;

            var jview = this.jm.view;
            var el = e.target || event.srcElement;
            var isnode = jview.is_node(el);
            if(isnode){
                var nodeid = jview.get_nodeid(el);
                var node = this.jm.get_node(nodeid);
                if(!node.isroot){
                    this.reset_shadow(el);
                    this.active_node = node;
                    this.offset_x = e.clientX - el.offsetLeft;
                    this.offset_y = e.clientY - el.offsetTop;
                    this.client_hw = Math.floor(el.clientWidth/2);
                    this.client_hh = Math.floor(el.clientHeight/2);
                    if(this.hlookup_delay != 0){
                        $w.clearTimeout(this.hlookup_delay);
                    }
                    if(this.hlookup_timer != 0){
                        $w.clearInterval(this.hlookup_timer);
                    }
                    var jd = this;
                    this.hlookup_delay = $w.setTimeout(function(){
                        jd.hlookup_delay = 0;
                        jd.hlookup_timer = $w.setInterval(function(){
                            jd.lookup_close_node.call(jd);
                        },options.lookup_interval);
                    },options.lookup_delay);
                    this.capture = true;
                }
            }
        },

        drag:function(e){
            if(!this.jm.get_editable()){return;}
            if(this.capture){
                this.show_shadow();
                this.moved = true;
                clear_selection();
                var container = this.jm.options.container;
                var scrollTop = $('#'+container+' .jsmind-inner').scrollTop();
                var scrollTop_window = $(window).scrollTop();
                var fz;
                var fz_;
                if(container=="jsmind_container"){
                	fz = 100;
                	fz_ = $('#'+container+' .jsmind-inner').height()-scrollTop_window;
                }else{
                	fz = $('#tabbox1').height()+150-scrollTop_window;
                	fz_ = 750-scrollTop_window;
                }
                var scrollHeight = $('#'+container+' jmnodes').height()-$('#'+container+' .jsmind-inner').height();
                if(e.clientY<fz&&scrollTop>0){
                	this.volumn+=5;
                	var newValue = scrollTop-5;
                	$('#'+container+' .jsmind-inner').scrollTop(newValue);
                }else if(e.clientY>fz_&&scrollTop<scrollHeight){
                	this.volumn_+=5;
                	var newValue = scrollTop+5;
                	$('#'+container+' .jsmind-inner').scrollTop(newValue);
                	if(container=="jsmind_container2"&&scrollTop_window<134){
                		$(window).scrollTop(134);
                		var cha = 134-scrollTop_window;
                		this.volumn_+=cha;
                	}
                }
                var py = e.clientY - this.offset_y-this.volumn+this.volumn_;
                var	px = e.clientX - this.offset_x;
                this.shadow.style.left = px + 'px';
                this.shadow.style.top = py + 'px';
                clear_selection();
            }
        },

        dragend:function(e){
            if(!this.jm.get_editable()){return;}
            if(this.capture){
                if(this.hlookup_delay != 0){
                    $w.clearTimeout(this.hlookup_delay);
                    this.hlookup_delay = 0;
                    this.clear_lines();
                }
                if(this.hlookup_timer != 0){
                    $w.clearInterval(this.hlookup_timer);
                    this.hlookup_timer = 0;
                    this.clear_lines();
                }
                if(this.moved){
                    var src_node = this.active_node;
                    var target_node = this.target_node;
                    var target_direct = this.target_direct;
                    this.move_node(src_node,target_node,target_direct);
                }
                this.hide_shadow();
            }
            this.moved = false;
            this.capture = false;
            this.volumn=0;
            this.volumn_=0;
        },

        //先添加父节点，再把目标节点移到父节点上，再把选中节点移到父节点上
        fuse_node:function(target_node,beforeid){
        	var jd = this.jm;
        	if(jd.options.container=="jsmind_container"){
        		var selected_node = this.jm.get_selected_node(); 
                if(!selected_node){prompt_info('please select a node first.');}
                //添加父节点level为1，sourceid为"".
                var flowid = selected_node.data.flowid;
                var line_color = this.jm.options.view.line_color;
                var level = 1;
                var topic = 'logic_node'+logic_node_num;
            	var pk = jsMind.util.uuid.newid();
            	var source_type = 0;
            	var sourceids = new Array();
            	var data = jd.construct_data(null,null,null,null,null,null,level,topic,line_color,sourceids,pk,flowid,null,source_type,null);
            	var index = target_node.index;
            	var nodeid = jsMind.util.uuid.newid();
            	var node = jd.add_node(target_node.parent, nodeid, topic,data,index);
            	logic_node_num++;
            	//把目标节点移到父节点上
            	jd.move_node(target_node.id, "_first_", node.id, "-1");
            	//把选中节点移到父节点上
            	jd.move_node(selected_node.id, beforeid, node.id, "-1");
            	jd.select_node(nodeid);
        	}else{
        		var selected_node = jd.get_selected_node();
        		var element = $('jmexpanderp[nodeid="'+target_node.id+'"]')[0];
            	var jqueryDom = $('#showTip_'+jd.options.container+'');
        		jqueryDom.css('top',element.offsetTop+element.clientHeight);
        		jqueryDom.css('left',element.offsetLeft);
        		jqueryDom.find('p').show();
        		jqueryDom.css('visibility','visible');
        		jqueryDom.find('p[paramNumber="0"]').hide();
        		jqueryDom.find('p[paramNumber="1"]').hide();
        		$('body').unbind('mousedown').mousedown(function(e){
        	    	if(e.target.parentNode.getAttribute('id')!="showTip_jsmind_container2"&&e.target.getAttribute('id')!="showTip_jsmind_container2"){
        	    		jqueryDom.css('visibility','hidden');
        	    	}
        	    });
        		var newnodeid = jsMind.util.uuid.newid();
    			var line_color = jd.options.view.line_color;
        		jqueryDom.find('p').unbind('click').click(function(){
        			jqueryDom.css('visibility','hidden');
        			var topic = $(this).attr('textValue');
        			var functionName = $(this).attr('functionName');
        			var functionType = $(this).attr('functionType');
        			var paramNumber = $(this).attr('paramNumber');
        			var columnType = $(this).attr('columnType');
        			var fixed = $(this).attr('fixed');
        			var level = $(this).attr('level');
        			var fk = 0;
        			data = jd.construct_data(functionName,functionType,columnType,paramNumber,fixed,fk,level,topic,line_color);
                	var newnode = jd.add_node(target_node.parent, newnodeid, topic,data,target_node.index);
                	//把目标节点移到父节点上
                	jd.move_node(target_node.id, "_first_", newnodeid, "-1");
                	var sparent = selected_node.parent;
                	//把选中节点移到父节点上
                	jd.move_node(selected_node.id, beforeid, newnodeid, "-1");
                	jd.check_subnode(sparent);
                	jd.check_subnode(newnode);
                	jd.check_subnode_(newnode);
                	jd.check_subnode_alias();
                	jd.select_node(newnodeid);
        		});
        	}
        },
        
        move_node:function(src_node,target_node,target_direct){
            var shadow_h = this.shadow.offsetTop;
            var shadow_w = this.shadow.offsetLeft;
            if(!!target_node && !!src_node && !jsMind.node.inherited(src_node, target_node)){
                // lookup before_node
                var sibling_nodes = target_node.children;
                var sc = sibling_nodes.length;
                var node = null;
                var delta_y = Number.MAX_VALUE;
                var node_before = null;
                var beforeid = '_last_';
                var paramIndex = 0;
                //flag为true则进行移动节点，false则进行融合节点
                var flag = true;
                while(sc--){
                    node = sibling_nodes[sc];
                    //var nodeWidth = node._data.view.width;
                    if(node.direction == target_direct && node.id != src_node.id){
                        var dy = node.get_location().y - shadow_h;
                        var dx = node.get_location().x - shadow_w;
                        if(dy<10 && dy>-10&&dx<20&&dx>-20&&target_node.isroot){
                        	//表示可以融合节点,此时的node_before表示被融合的节点
                        	flag = false;
                        	node_before = node;
                        	if(dy>0){beforeid = node_before.id};
                        }else if(dy > 0 && dy < delta_y){
                            delta_y = dy;
                            node_before = node;
                            beforeid = '_first_';
                        }
                    }
                }
                if(flag){
                	if(this.jm.options.container=="jsmind_container"){
                		if(this.errorType==101){
                			$.dialog("数据源节点不可添加为父节点！");
                		}else if(this.errorType==102){
                			$.dialog("不能在数据源节点添加子节点！");
                		}else{
                			if(target_direct == jsMind.direction.right){
                				this.jm.move_node(src_node.id, target_node.id, target_node.parent.id, target_direct);
                    			this.jm.move_node(target_node.id, '_first_', src_node.id, target_direct);
                    		}else{
                    			if(!!node_before){
                            		beforeid = node_before.id;
                        		}
                        		this.jm.move_node(src_node.id, beforeid, target_node.id, target_direct);
                    		}
                		}
                	}else{
                		switch(this.errorType){
	                		case 201:
	                			$.dialog("字段节点不可添加为父节点！");
	                			break;
	                		case 202:
	                			$.dialog("常量节点不可添加为父节点！");
	                			break;
	                		case 203:
	                			$.dialog("无参函数不可添加为父节点！");
	                			break;
	                		case 204:
	                			$.dialog("不能在字段节点添加子节点！");
	                			break;
	                		case 205:
	                			$.dialog("不能在常量节点添加子节点！");
	                			break;
	                		case 206:
	                			$.dialog("该节点的入参个数已经到了极限！");
	                			break;
	                		case 207:
	                			$.dialog("入参类型不正确！");
	                			break;
	                		case 0:
	                    		if(target_direct == jsMind.direction.right){
	                    			var sparent = src_node.parent;
	                				this.jm.move_node(src_node.id, target_node.id, target_node.parent.id, target_direct);
	                				this.jm.check_subnode(sparent);
	                    			this.jm.move_node(target_node.id, '_first_', src_node.id, target_direct);
	                    			this.jm.check_subnode(src_node);
	                    			this.jm.check_subnode_alias();
	                    			//以下操作保证了移动transentity后，与是否出参保持一致
	                    			$('.new_column_name').show();
	                    		}else{
	                    			if(!!node_before){
	                            		beforeid = node_before.id;
	                        		}
	                            	var sparent = src_node.parent;
	                            	this.jm.move_node(src_node.id, beforeid, target_node.id, target_direct);
	                            	this.jm.check_subnode(sparent);
	                            	this.jm.check_subnode(target_node);
	                            	this.jm.check_subnode_alias();
	                            	//以下操作保证了移动transentity后，与是否出参保持一致
	                            	if(src_node.parent.isroot){
	            						$('.new_column_name').show();
	                        		}else{
	                        			$('.new_column_name').hide();
	                        		}
	                    		}
	                			break;
                		}
                	}
                }else{
                	$("#"+this.jm.options.container+" jmnode").removeClass("selected");
                	this.fuse_node(node_before,beforeid);
                }
            }
            this.active_node = null;
            this.target_node = null;
            this.target_direct = null;
            this.errorType = 0;
        },

        jm_event_handle:function(type,data){
            if(type === jsMind.event_type.resize){
                this.resize();
            }
        }
    };

    var draggable_plugin = new jsMind.plugin('draggable',function(jm){
        var jd = new jsMind.draggable(jm);
        jd.init();
        jm.add_event_listener(function(type,data){
            jd.jm_event_handle.call(jd,type,data);
        });
    });

    jsMind.register_plugin(draggable_plugin);

})(window);
