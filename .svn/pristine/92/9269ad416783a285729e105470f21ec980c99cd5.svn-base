/*
 * Released under BSD License
 * Copyright (c) 2014-2015 hizzgdev@163.com
 * 
 * Project Home:
 *   https://github.com/hizzgdev/jsmind/
 */

(function($w){
    'use strict';
    var $d = $w.document;
    var __name__ = 'jsMind';
    var jsMind = $w[__name__];
    if(!jsMind){return;}
    if(typeof jsMind.draggable != 'undefined'){return;}

    var jdom = jsMind.util.dom;
    var jcanvas = jsMind.util.canvas;

    var clear_selection = 'getSelection' in $w ? function(){
         $w.getSelection().removeAllRanges();
    } : function(){
         $d.selection.empty();
    };

    var options = {
        line_width : 5,
        lookup_delay : 500,
        lookup_interval : 50
    };

    jsMind.draggable = function(jm){
        this.jm = jm;
        this.e_canvas = null;
        this.canvas_ctx = null;
        this.shadow = null;
        this.shadow_w = 0;
        this.shadow_h = 0;
        this.show_tip = null;
        this.active_node = null;
        this.target_node = null;
        this.target_direct = null;
        this.client_w = 0;
        this.client_h = 0;
        this.offset_x = 0;
        this.offset_y = 0;
        this.hlookup_delay = 0;
        this.hlookup_timer = 0;
        this.capture = false;
        this.moved = false;
    };

    jsMind.draggable.prototype = {
        init:function(){
            this._create_canvas();
            this._create_shadow();
            this._create_tip();
            this._event_bind();
        },

        resize:function(){
            this.jm.view.e_nodes.appendChild(this.shadow);
            this.e_canvas.width=this.jm.view.size.w;
            this.e_canvas.height=this.jm.view.size.h;
            this.jm.view.e_nodes.appendChild(this.show_tip);
        },

        _create_canvas:function(){
            var c = $d.createElement('canvas');
            //暂时先这么定义
            var container = this.jm.options.container;
            c.setAttribute('id','canvas_'+container);
            this.jm.view.e_panel.appendChild(c);
            var ctx = c.getContext('2d');
            this.e_canvas = c;
            this.canvas_ctx = ctx;
        },

        _create_shadow:function(){
            var s = $d.createElement('jmnode');
            s.style.visibility = 'hidden';
            s.style.zIndex = '3';
            s.style.cursor = 'move';
            s.style.opacity= '0.7';
            var container = this.jm.options.container;
            s.setAttribute('nodeid','shadow_'+container);
            this.shadow = s;
        },

        _create_tip:function(){
        	var container = this.jm.options.container;
            var showTip = $d.createElement('div');
            showTip.style.visibility = 'hidden';
            showTip.className='listContent';
            //showTip.style.position = 'relative';
            showTip.setAttribute('id','showTip_'+container);
            if(container=="jsmind_container"){
                showTip.innerHTML='<p onclick="set_flag(this,1);">断点</p>'+
                    '<p onclick="set_flag(this,2);">监控数据</p>'+
                    '<p onclick="set_flag(this,3);">数据出口</p>';
            }else{
            	showTip.innerHTML='<p textValue = "?+?">加</p>'+
                        '<p textValue = "?-?">减</p>'+
                        '<p textValue = "?*?">乘</p>'+
                        '<p textValue = "?/?">除</p>';
            }
            this.show_tip = showTip;
        },
        
        reset_shadow:function(el){
            var s = this.shadow.style;
            this.shadow.innerHTML = el.innerHTML;
            s.left = el.style.left;
            s.top = el.style.top;
            this.shadow_w = this.shadow.clientWidth;
            this.shadow_h = this.shadow.clientHeight;
        },

        show_shadow:function(){
            if(!this.moved){
                this.shadow.style.visibility = 'visible';
            }
        },

        hide_shadow:function(){
        	this.shadow.innerHTML = "";
            this.shadow.style.visibility = 'hidden';
        },

        clear_lines:function(){
            jcanvas.clear(this.canvas_ctx, 0, 0, this.jm.view.size.w, this.jm.view.size.h);
        },

        _magnet_shadow:function(node){
            if(!!node){
                this.canvas_ctx.lineWidth = options.line_width;
                this.canvas_ctx.strokeStyle = 'rgba(0,0,0,0.3)';
                this.canvas_ctx.lineCap = 'round';
                this.clear_lines();
                jcanvas.lineto(this.canvas_ctx,
                    node.sp.x,
                    node.sp.y,
                    node.np.x,
                    node.np.y);
            }
        },

        _lookup_close_node:function(){
            var root = this.jm.get_root();
            var root_location = root.get_location();
            var root_size = root.get_size();
            var root_x = root_location.x + root_size.w/2;

            var sw = this.shadow_w;
            var sh = this.shadow_h;
            var sx = this.shadow.offsetLeft;
            var sy = this.shadow.offsetTop;
            var ns,nl;

            var direct = (sx + sw/2)>=root_x ?
                            jsMind.direction.right : jsMind.direction.left;
            var nodes = this.jm.mind.nodes;
            var node = null;
            var min_distance = Number.MAX_VALUE;
            var distance = 0;
            var closest_node = null;
            var closest_p = null;
            var shadow_p = null;
            for(var nodeid in nodes){
                var np,sp;
                node = nodes[nodeid];
                //查看各个节点的方向
                //console.log("方向啊："+node.topic+":::"+node.direction);
                if(node.isroot || node.direction == direct){
                    if(node.id == this.active_node.id){
                        continue;
                    }
                    ns = node.get_size();
                    nl = node.get_location();
                    if(direct == jsMind.direction.right){
                        if(sx-nl.x-ns.w<=0){continue;}
                        distance = Math.abs(sx-nl.x-ns.w) + Math.abs(sy+sh/2-nl.y-ns.h/2);
                        np = {x:nl.x+ns.w-options.line_width,y:nl.y+ns.h/2};
                        sp = {x:sx+options.line_width,y:sy+sh/2};
                    }else{
                        if(nl.x-sx-sw<=0){continue;}
                        distance = Math.abs(sx+sw-nl.x) + Math.abs(sy+sh/2-nl.y-ns.h/2);
                        np = {x:nl.x+options.line_width,y:nl.y+ns.h/2};
                        sp = {x:sx+sw-options.line_width,y:sy+sh/2};
                    }
                    if(distance < min_distance){
                        closest_node = node;
                        closest_p = np;
                        shadow_p = sp;
                        min_distance = distance;
                    }
                }
            }
            var result_node = null;
            if(!!closest_node){
                result_node = {
                    node:closest_node,
                    direction:direct,
                    sp:shadow_p,
                    np:closest_p
                };
            }
            return result_node;
        },

        lookup_close_node:function(){
            var node_data = this._lookup_close_node();
            if(!!node_data){
            	this.target_node = node_data.node;
				this.target_direct = node_data.direction;
				//避免父节点变子节点
				if(!!this.target_node && !!this.active_node && !jsMind.node.inherited(this.active_node, this.target_node)){
					//flag为true则出现磁铁线，false则不出现
					var flag=true;
					var shadow_h = this.shadow.offsetTop;
	                var sibling_nodes = this.target_node.children;
	                var sc = sibling_nodes.length;
	                var node = null;
	                var delta_y = Number.MAX_VALUE;
	                var node_before = null;
	                var src_node = this.active_node;
	                while(sc--){
	                    node = sibling_nodes[sc];
	                    if(node.id != src_node.id){
	                        var dy = node.get_location().y - shadow_h;
	                        if(dy<10 && dy>-10){
	                        	//这里定义式样
	                        	$($("jmnode[nodeid='"+node.id+"']")[0]).addClass("intro");
	                        	//暂时先都出现磁铁线
	                        	//flag=false;
	                        }else{
	                        	$($("jmnode[nodeid='"+node.id+"']")[0]).removeClass("intro");
	                        }
	                    }
	                }
	                if(flag&&!this.target_node.isroot){
						this._magnet_shadow(node_data);
					}else{
						this.clear_lines();
					} 
				}else{
					this.clear_lines();
				}
            }
        },

        _event_bind:function(){
            var jd = this;
            var container = this.jm.view.container;
            jdom.add_event(container,'mousedown',function(e){
                var evt = e || event;
                jd.dragstart.call(jd,evt);
            });
            jdom.add_event(container,'mousemove',function(e){
                var evt = e || event;
                jd.drag.call(jd,evt);
            });
            jdom.add_event(container,'mouseup',function(e){
                var evt = e || event;
                jd.dragend.call(jd,evt);
            });
        },

        dragstart:function(e){
            if(!this.jm.get_editable()){return;}
            if(this.capture){return;}
            this.active_node = null;

            var jview = this.jm.view;
            var el = e.target || event.srcElement;
            var isnode = jview.is_node(el);
            if(isnode){
                var nodeid = jview.get_nodeid(el);
                var node = this.jm.get_node(nodeid);
                if(!node.isroot){
                    this.reset_shadow(el);
                    this.active_node = node;
                    this.offset_x = e.clientX - el.offsetLeft;
                    this.offset_y = e.clientY - el.offsetTop;
                    this.client_hw = Math.floor(el.clientWidth/2);
                    this.client_hh = Math.floor(el.clientHeight/2);
                    if(this.hlookup_delay != 0){
                        $w.clearTimeout(this.hlookup_delay);
                    }
                    if(this.hlookup_timer != 0){
                        $w.clearInterval(this.hlookup_timer);
                    }
                    var jd = this;
                    this.hlookup_delay = $w.setTimeout(function(){
                        jd.hlookup_delay = 0;
                        jd.hlookup_timer = $w.setInterval(function(){
                            jd.lookup_close_node.call(jd);
                        },options.lookup_interval);
                    },options.lookup_delay);
                    this.capture = true;
                }
            }
        },

        drag:function(e){
            if(!this.jm.get_editable()){return;}
            if(this.capture){
                this.show_shadow();
                this.moved = true;
                clear_selection();
                var px = e.clientX - this.offset_x;
                var py = e.clientY - this.offset_y;
                var cx = px + this.client_hw;
                var cy = py + this.client_hh;
                this.shadow.style.left = px + 'px';
                this.shadow.style.top = py + 'px';
                clear_selection();
            }
        },

        dragend:function(e){
            if(!this.jm.get_editable()){return;}
            if(this.capture){
                if(this.hlookup_delay != 0){
                    $w.clearTimeout(this.hlookup_delay);
                    this.hlookup_delay = 0;
                    this.clear_lines();
                }
                if(this.hlookup_timer != 0){
                    $w.clearInterval(this.hlookup_timer);
                    this.hlookup_timer = 0;
                    this.clear_lines();
                }
                if(this.moved){
                    var src_node = this.active_node;
                    var target_node = this.target_node;
                    var target_direct = this.target_direct;
                    this.move_node(src_node,target_node,target_direct);
                }
                this.hide_shadow();
            }
            this.moved = false;
            this.capture = false;
        },

        //先添加父节点，再把目标节点移到父节点上，再把选中节点移到父节点上
        fuse_node:function(target_node,beforeid){
        	if(this.jm.options.container=="jsmind_container"){
        		var selected_node = this.jm.get_selected_node(); 
                if(!selected_node){prompt_info('please select a node first.');}
                //添加父节点level为1，sourceid为"".
                var flowid = selected_node.data.flowid;
                var line_color = selected_node.data.line_color;
                var level;
                if(this.jm.options.container=="jsmind_container"){
                	level = 1;
                }else{
                	level = 3;
                }
                var topic = 'logic_node'+logic_node_num;
                var alias = 't'+table_alias_num;
            	var pk = jsMind.util.uuid.newid();
            	var sourceids = new Array();
            	var data = {"sourceids":sourceids,"level":level,"pk":pk,"sql":"","isSave":0,"isInterface":0,"isDebug":0,"alias":alias,"flowid":flowid,"sourceid":"","subMind":"","columns":"","params":"","line_color":line_color};
            	var index = target_node.index;
            	var nodeid = jsMind.util.uuid.newid();
            	var node = this.jm.add_node(target_node.parent, nodeid, topic,data,index);
            	logic_node_num++;
            	table_alias_num++;
            	//把目标节点移到父节点上
            	this.jm.move_node(target_node.id, "_first_", node.id, "-1");
            	//把选中节点移到父节点上
            	this.jm.move_node(selected_node.id, beforeid, node.id, "-1");
            	this.jm.select_node(nodeid);
        	}else{
        		var jd = this.jm;
        		var selected_node = jd.get_selected_node();
        		var element = $('jmexpanderp[nodeid="'+target_node.id+'"]')[0];
            	var jqueryDom = $('#showTip_'+jd.options.container+'');
        		jqueryDom.css('top',element.offsetTop+element.clientHeight);
        		jqueryDom.css('left',element.offsetLeft);
        		jqueryDom.css('visibility','visible');
        		$('body').unbind('mousedown').mousedown(function(e){
        	    	if(e.target.parentNode.getAttribute('id')!="showTip_jsmind_container2"){
        	    		jqueryDom.css('visibility','hidden');
        	    	}
        	    });
        		var newnodeid = jsMind.util.uuid.newid();
        		var level = 3;
    			var line_color = jd.options.view.line_color;
    			var subAlias = 'c'+column_alias_num;
    			var topic2 = $('#jmnodeModel').html();
	        	var level2 = $('#jmnodeModel').attr('level');
	        	var nodeid2 = jsMind.util.uuid.newid();
        		jqueryDom.find('p').unbind('click').click(function(){
        			jqueryDom.css('visibility','hidden');
        			var topic = $(this).attr('textValue');
        			var data = {"level":level,"sql":"","subAlias":subAlias,"line_color":line_color};
                	var newnode = jd.add_node(target_node.parent, newnodeid, topic,data,target_node.index);
                	column_alias_num++;
                	//把目标节点移到父节点上
                	jd.move_node(target_node.id, "_first_", newnodeid, "-1");
                	//把选中节点移到父节点上
                	jd.move_node(selected_node.id, beforeid, newnodeid, "-1");
                	jd.select_node(newnodeid);
        		});
        	}
        },
        
        move_node:function(src_node,target_node,target_direct){
            var shadow_h = this.shadow.offsetTop;
            if(!!target_node && !!src_node && !jsMind.node.inherited(src_node, target_node)){
                // lookup before_node
                var sibling_nodes = target_node.children;
                var sc = sibling_nodes.length;
                var node = null;
                var delta_y = Number.MAX_VALUE;
                var node_before = null;
                var beforeid = '_last_';
                //flag为true则进行移动节点，false则进行融合节点
                var flag = true;
                while(sc--){
                    node = sibling_nodes[sc];
                    if(node.direction == target_direct && node.id != src_node.id){
                        var dy = node.get_location().y - shadow_h;
                        if(dy<10 && dy>-10){
                        	//表示可以融合节点,此时的node_before表示被融合的节点
                        	flag = false;
                        	node_before = node;
                        	if(dy>0){beforeid = node_before.id};
                        }else if(dy > 0 && dy < delta_y){
                        	console.log("return:"+node.topic);
                            delta_y = dy;
                            node_before = node;
                            beforeid = '_first_';
                        }
                    }
                }
                if(flag){
                	if(!!node_before){beforeid = node_before.id;}
                    //在这里对磁铁吸引进行判断
                	if(target_node.data.level==2||target_node.data.level==4){
                		$.dialog("不能在该节点添加子节点！");
                    }else{
                    	this.jm.move_node(src_node.id, beforeid, target_node.id, target_direct);
                    	//以下操作保证了移动transentity后，与是否出参保持一致
                    	if(this.jm.options.container=="jsmind_container2"){
                    		if(src_node.parent.isroot){
        						$('.new_column_name').show();
        						$('.new_constant_value').hide();
        						if(src_node.data.level==5){
        							$('.new_constant_value').show();
        						}
                    		}else{
                    			$('.new_column_name').hide();
        						$('.new_constant_value').hide();
        						if(src_node.data.level==5){
        							$('.new_constant_value').show();
        						}
                    		}
                    	}
                    }
                }else{
                	$("jmnode").removeClass("intro");
                	this.fuse_node(node_before,beforeid);
                }
                
            }
            this.active_node = null;
            this.target_node = null;
            this.target_direct = null;
        },

        jm_event_handle:function(type,data){
            if(type === jsMind.event_type.resize){
                this.resize();
            }
        }
    };

    var draggable_plugin = new jsMind.plugin('draggable',function(jm){
        var jd = new jsMind.draggable(jm);
        jd.init();
        jm.add_event_listener(function(type,data){
            jd.jm_event_handle.call(jd,type,data);
        });
    });

    jsMind.register_plugin(draggable_plugin);

})(window);
