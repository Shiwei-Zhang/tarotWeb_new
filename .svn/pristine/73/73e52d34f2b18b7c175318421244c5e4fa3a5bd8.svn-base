//variables default
//TODO ...
var _trainType = 'naivebayes';
var _sourceType = 'datasource';
var _conId = null,
	_tableName = null,
	_menuId = null;
var _connInfo = {
		trainType: '',
		con: '',
		tableName: '',
		column: ''
};

var trainType_;
var sourceType_;
var con_;
var tableName_;
var column_;
var faceName_;
var __changed = false;
//DATA MINING entrance
var logMap = {};
var dataMiningInit = function($dataMiningId){
	_menuId = $dataMiningId;
	console.log(_menuId);
	
	$('.data-mining-log').empty();
	$.showLoading();
	$.ajax({
		url:urlId+'/getDataMining',
		type:'POST',
		data:{
			menuId: _menuId
		},
		success:function(data) {
			if(data){
				data = JSON.parse( data );
				var dataMining = data['dataMining'];
				var dataMiningTrainInfo = data['dataMiningTrainInfo'];
				var targetInfo = data['targetInfo'];
				var connectionInfo = data['connectionInfo'];
				var sourceData = data['sourceData'];
				
				renderPage(dataMining, dataMiningTrainInfo, targetInfo, connectionInfo, sourceData);
			}else{
				resetPage();
			}
			$.hideLoading();
		}
	});
};

//渲染已经有dataming信息的页面
var renderPage = function(dataMining, dataMiningTrainInfo, targetInfo, connectionInfo, sourceData){
	//训练模型 和属性信息
	//_tableName = sourceData.fileName;
	var  trainType = dataMining.type;
	_trainType = trainType;
	var trainColumn = '';
	for(var i = 0; i < dataMiningTrainInfo.length; i ++){
		var dmt = dataMiningTrainInfo[i];
		if( dmt.enumCode == 'trainColumn' ){
			//column_ = dmt.value;
			trainColumn = dmt.value;
		}else{
			$('.datamining-attr .' + dmt.enumCode).val(dmt.value);
		}
	}
	$('.datamining-train .train-type select').val(trainType);
	showAttr(trainType);
	//类型
	if(sourceData.isInterface == 1){
		_sourceType = 'interface';
		$('.datamining-train .interfaceName').val(sourceData.fileName);
	}else{
		_sourceType = 'datasource';
		_connInfo = {
				trainType: trainType,
				con: connectionInfo.id,
				tableName: sourceData.fileName,
				column: trainColumn
		};
		_conId = connectionInfo.id;
		_tableName = sourceData.fileName;
		//render data source
		renderDataSourceConnection();
	}
	changeType(_sourceType);
	
	//按钮
	$('.datamining-save').attr('data-flowid', dataMining.logicFlowId).attr('data-nodeid', dataMining.logicNodeId).attr('data-id', dataMining.id);
	$('.datamining-test').attr('data-flowid', dataMining.logicFlowId).attr('data-type', 2);
	
	//日志
	if(logMap[dataMining.logicFlowId]){
		var logArrs = logMap[dataMining.logicFlowId];
		var logs = $('.data-mining-log').empty();
		for(var i = 0; i < logArrs.length; i++){
			logs.append( $('<p>' + logArrs[i] + '</p>') ); 
		}
	}
};

//初始化无dataming信息的页面
var resetPage = function(){
	_trainType = 'naivebayes', _sourceType = 'datasource', _conId = null, _tableName = null,
	_connInfo = {
			trainType: '',
			con: '',
			tableName: '',
			column: ''
	};
	
	changeType(_sourceType);
	$('.train-type select').val( _trainType );
	//render data source
	renderDataSourceConnection();
	
	$('.interface input').val(''); 
	var conTables = $('.datamining-train .datasource-tables select');
	var str = '<option value="">请选择表</option>';
	conTables.empty().append( $( str ) );
	
	var columns = $('.datamining-train .datasource-columns select');
	var columnDom = '<option value="">请选择或者填写字段</option>';
	columns.empty().append( $(columnDom) );
	
	//属性清空
	$('.btnPart p').removeAttr('data-flowid').removeAttr('data-type').removeAttr('data-nodeid').removeAttr('data-id');
	document.getElementById('datamining-from').reset();
	$('.dataMinR-prop ul').hide().first().show();
	
};

//类型选择
$('.datamining-train .source-type select').unbind('change').change(function(){
	var $this = $(this);
	_sourceType = $this.val();
	
	changeType(_sourceType);
});

//|---------------------------------------------|
//|---------------------------------------------|
//|---------------------------------------------|
//|------------ train part ---------------------|
//|---------------------------------------------|
//|---------------------------------------------|
//|---------------------------------------------|
//类型切换
var changeType = function(type){
	if(type == 'interface'){
		//$('.interface').css({'color': 'black'});
		$('.interface input').removeAttr('disabled');
		//$('.datasource').css({'color': '#A0A0A0'});
		$('.datasource select').attr('disabled', 'disabled');
	}else if(type == 'datasource'){
		//$('.datasource').css({'color': 'black'});
		$('.datasource select').removeAttr('disabled');
		//$('.interface').css({'color': '#A0A0A0'});
		$('.interface input').attr('disabled', 'disabled');
		$('.interfaceName').val('');
	}
	
	$('.source-type select').val(type);
};

//获得连接信息, 并渲染
var renderDataSourceConnection = function(){
	$.showLoading();
    var str='<option value="">请选择数据连接</option>';
    $.ajax({
        url:urlId+'/selectDataConnectionAndPowerByUserId?userId=' + user_.id,
        type:'POST',
        success:function(data) {
			if(!data){
				$.hideLoading();
				return ;
			}
			
            $( JSON.parse(data) ).each(function(index,item){
            	var sourceType = item['SOURCE_TYPE']; 
            	if(sourceType != 'csv' || sourceType != 'hdfs' && sourceType != 'ftp' ){//ftp and hdfs are older
            		str+='<option value='+item["ID"]+'>'+item["NAME"]+'</option>';
            	}
            });
            var $connSelect = $('.datamining-train .datasource-connection select');
           // $('.datasource-connection select').empty().append($(str));//target
            $connSelect.empty().append($(str));
            bindConnectionInfoChangeEvent( $connSelect );
            if(_connInfo.con){
            	$connSelect.val( _connInfo.con );
            	$connSelect.trigger('change');	
            }
            
    		$.hideLoading();
        }
    });
};
//表信息渲染
var bindConnectionInfoChangeEvent = function( $connSelect ){
	$connSelect.unbind('change').change(function(){
		_conId = $connSelect.val();
		var conTables = $('.datamining-train .datasource-tables select');
		var str = '<option value="">请选择表</option>';
		console.log('Please choose one connection');
		conTables.empty().append( $( str ) );
		
		var columns = $('.datamining-train .datasource-columns select');
		var columnDom = '<option value="">请选择或者填写字段</option>';
		columns.empty().append( $(columnDom) );
		if(!_conId){
			return;
		}
		
		$.ajax({
            url:urlId+'/selectValueAndTableByConId'+'?conId=' + _conId,
            type:'POST',
            success:function(data) {
            	if(!data){//无表数据
            		//conTables.empty();
            		return ;
            	}
				var dataJson = JSON.parse(data );
            	var tableName = dataJson.tableName;
				if( !tableName ){
					//conTables.empty();
					return ;
				}
				
				var renderTableName = false;
                for(var i=0;i<tableName.length;i++){
                	if(_connInfo['tableName'] == tableName[i]){
                		renderTableName = true;
                	}
                    str+='<option value="'+tableName[i]+'">'+tableName[i]+'</option>';
                }
                conTables.empty().append( $( str ) );
                bindConTablesChangeEvent(conTables, _conId);
                
                if(_connInfo.tableName && renderTableName){
                	conTables.val(_connInfo.tableName);
                	conTables.trigger('change');
                }else{
                	conTables.val('');
                }
                $.hideLoading();
            },
            error: function(){
            	$.dialog('连接失败， 请稍后重试~');
            }
        });
	});
	
	/*$connSelect.unbind('click').click(function(e){
		window.event? window.event.cancelBubble = true : e.stopPropagation();
		$.showLoading();
		var $connSelect = $('.datamining-train .datasource-connection select');
	    var str='<option value="">请选择数据连接</option>';
	    var option = document.createElement('option');
	    option.value = '';
	    option.innerHTML = '请选择数据连接';
	    
	    $.ajax({
	        url:urlId+'/selectDataConnectionAndPowerByUserId?userId=' + user_.id,
	        type:'POST',
	        success:function(data) {
				if(!data){
					$.hideLoading();
					return ;
				}
				var select = document.getElementById('connInfo');
				select.options.length = 0;
				select.appendChild(option);
				
	            $( JSON.parse(data) ).each(function(index,item){
	            	var sourceType = item['SOURCE_TYPE']; 
	            	if(sourceType != 'csv' || sourceType != 'hdfs' && sourceType != 'ftp' ){
	            		option = document.createElement('option');
	            		option.value = item["ID"];
	            		option.innerHTML = item["NAME"];
	            		
	            		select.appendChild(option);
	            	}
	            });
	            //bindConnectionInfoChangeEvent( $('#connInfo') );
	    		$.hideLoading();
	        }
	    });
	});*/
};
//字段信息渲染
var bindConTablesChangeEvent = function($conTables, $conId){
	$conTables.unbind('change').change(function(){
		_tableName = $conTables.val();
		var columns = $('.datamining-train .datasource-columns select');
		var columnDom = '<option value="">请选择或者填写字段</option>';
		if(!_tableName){
			console.log('Please choose one table');
			columns.empty().append( $(columnDom) );
			return ;
		}
		$.ajax({
			url:urlId+'/selectTableColumn',
			type:'POST',
			data:{
				conId: $conId,
				tableName: _tableName
			},
			success:function(data) {
				if(data){
					data = JSON.parse( data );
					//获得column数据
					var columnObjects = data.table[_tableName];
					var needRenderColumn = false;
					if(columnObjects){
						for(var i = 0; i < columnObjects.length; i ++){
							var columnObject = columnObjects[i];
							if(_connInfo['column'] == columnObject.column){
								needRenderColumn = true;
							}
							columnDom += '<option value="'+columnObject.column+'">' + columnObject.column + '</option>';
						}
						//渲染 字段
						columns.empty().append( $(columnDom) );
						
						if(_connInfo.column && needRenderColumn){
							columns.val(_connInfo.column);
						}else{
							columns.val('');
						}
					}
				}
			}
		});
	});
};



//----------data mining save & test
//1.save
$('.datamining-save').unbind('click').click(function(){
	var dataMining = {
			menuId: _menuId
	};
	//a. train type
	dataMining['trainType'] = _trainType;
	//a2. train type attrs
	var attrs = getAttrs(_trainType);
	
	if(!attrs){
		return ;
	}
	dataMining[_trainType] = JSON.stringify( attrs );
	
	
	//b. source type
	dataMining['sourceType'] = _sourceType;
	var sourceTypeParams = {};
	if(_sourceType == 'interface'){
		var interfaceName = $('.datamining-train .interfaceName').val();
		if(!interfaceName){
			$.dialog('接口名称不能为空');
			return ;
		}
		if(specialSymbols.test(interfaceName)){
			$.dialog("接口名称不能包含特殊字符");
			return ;
		}
		if(chineseValidation.test(interfaceName)){
			$.dialog("接口名称不能包含中文");
			return ;
		}
		sourceTypeParams['interfaceName'] = interfaceName;
	}else if(_sourceType == 'datasource'){
		var trainColumn = $('.datasource-columns select').val();
		if(!_conId){
			$.dialog("请选择数据连接");
			return ;
		}
		if(!_tableName){
			$.dialog("请选择表");
			return ;
		}
		if(!trainColumn){
			$.dialog("请选择或填写字段");
			return ;
		}
		sourceTypeParams['conId'] = _conId;
		sourceTypeParams['tableName'] = _tableName;
		sourceTypeParams['trainColumn'] = trainColumn;
	}
	dataMining[_sourceType] = JSON.stringify( sourceTypeParams );
	
	var $saveBtn = $('.datamining-save');
	dataMining['userId'] = $.getCookie('userId').id;
	dataMining['userName'] = $.getCookie('userId').name;
	
	if( $saveBtn.attr('data-flowid') || $saveBtn.attr('data-nodeid') || $saveBtn.attr('data-id') ){
		//更新DATA MINING
		dataMining['flowId'] = $saveBtn.attr('data-flowid');
		dataMining['nodeId'] = $saveBtn.attr('data-nodeid');
		dataMining['id'] = $saveBtn.attr('data-id');
		updateDataMining(dataMining, trainColumn);
		return ;
	}
	//d. saved
	$.showLoading();
	$.ajax({
		url:urlId+'/saveDataMining',
		type:'POST',
		data:dataMining,
		success:function(data) {
			if(data){
				$.dialog('保存成功');
				data = JSON.parse( data );
				//修改成功后的属性信息
				__changed = false;
				_connInfo = {
						trainType: _trainType,
						con: _conId,
						tableName: _tableName,
						column: trainColumn
				};
				
				
				$('.datamining-save').attr('data-flowid', data.logicFlowId).attr('data-nodeid', data.logicNodeId).attr('data-id', data.id);
				$('.datamining-test').attr('data-flowid', data.logicFlowId).attr('data-type', 3);
			}
			$.hideLoading();
		}
	});
});
var updateDataMining = function(dataMining, $trainColumn){
	$.showLoading();
	$.ajax({
		url:urlId+'/updateDataMining',
		type:'POST',
		data:dataMining,
		success:function(data) {
			if(data){
				$.dialog('更新成功');
				
				__changed = false;
				_connInfo = {
						trainType: _trainType,
						con: _conId,
						tableName: _tableName,
						column: $trainColumn
				};
			}
			$.hideLoading();
		}
	});
}


//test
$('.datamining-test').unbind().click(function(){
	var flowId = $(this).attr('data-flowid');
	var type = $(this).attr('data-type');
	if(!flowId || !type){
		$.dialog('请确认信息是否保存成功');
		return;
	}
	var interfaceName = $('.datamining-train .interfaceName').val();
	var $trainType = $('.train-type select').val();
	var $sourceType = $('.source-type select').val();
	var $con = $('.datasource-connection select').val();
	var $tableName = $('.datasource-tables select').val();
	var $column = $('.datasource-columns select').val();
	
	
	var sendEngine = function(){
		$.ajax({
			url:urlId+'/sendEngineByTest',
			type:'POST',
			data:{
				flowId: flowId,
				type: type
			},
			success:function(data) {
				if(data){
					data = JSON.parse(data);
					if(data.flag){
						$.dialog('信息发送成功。');
						startSchedule(data.uuid, flowId);
					}
				}
				$.hideLoading();
			}, 
			error: function(){
				$.dialog('服务器出现问题， 请稍后重试~');
			}
		});
	};
	if(__changed || ($trainType != _connInfo.trainType) || ( $con != _connInfo.con) || ($tableName != _connInfo.tableName) || ($column != _connInfo.column)  ){
		console.log('数据改变。。。');
		$.confirm('页面信息发生改变， 请先保存信息， 是否保存修改信息？', function(){
			/*$('.train-type select').val(_connInfo.trainType).trigger('change');
			document.getElementById("datamining-from").reset();
			$('.datasource-connection select').val(_connInfo.con).trigger('change');	
			sendEngine();*/
			$('.datamining-save').trigger('click');
		});
	}else{
		sendEngine();
	}
	
});

var startSchedule = function( uuid, flowId ){
	var logs = $('.data-mining-log');
	logs.empty();
	var logArrs = [];
	var isStop = false;
	var plan = window.setInterval(
			function(){
				if(isStop){
					window.clearInterval(plan);
					return ;
				}
				
				$.ajax({
					url:urlId+'/getLogByUuid?time=' + new Date().getTime(),
					type:'POST',
					data:{
						uuid: uuid
					},
					success:function(data) {
						if(data){
							data = JSON.parse( data );
							for(var i = 0; i < data.length; i++){
								var log = JSON.parse( data[i] );
								logs.find('p').last().remove();
								if(log.result == 'byebye' || log.result_code == '999'){
									console.log('stop it...');
									isStop = true;
									
									logMap[flowId] = logArrs;
									break;
								}
								if(log.result_code == '402'){
									console.log('stop it when error.');
									logArrs.push( log.result );
									logs.append( $('<p>' + log.result + '</p>') );
									isStop = true;
									
									logMap[flowId] = logArrs;
									break;
								}
								logArrs.push( log.result );
								logs.append( $('<p>' + log.result + '</p>') );
								logs.append( $('<p> ... </p>') );
							}
						}
					},
					error: function(){
						console.log('Ooop, error! stop it...');
						isStop = true;
					}
		})}, 1000);
};

//|---------------------------------------------|
//|---------------------------------------------|
//|--------- attribution part ------------------|
//|---------------------------------------------|
//|---------------------------------------------|
$('.datamining-train .train-type select').unbind('change').change(function(){
	_trainType = $(this).val();
	if(_trainType){
		showAttr(_trainType);
	}
});
var showAttr = function(trainType){
	$('.datamining-attr ul').hide();
	switch(trainType){
	case 'naivebayes':
		$('.datamining-attr ul.naivebayes-attr').show();
		break;
	case 'linearregression':
		$('.datamining-attr ul.linearRegression-attr').show();
		break;
	case 'logisticregression':
		$('.datamining-attr ul.logisticRegression-attr').show();
		break;
	case 'ridgeregression':
		$('.datamining-attr ul.ridgeregression-attr').show();
		break;
	case 'svm':
		$('.datamining-attr ul.svm-attr').show();
		break;
	case 'kmeans':
		$('.datamining-attr ul.kmeans-attr').show();
		break;
	case 'decisiontreesclassifier':
		$('.datamining-attr ul.decisiontreesclassifier-attr').show();
		break;
	case 'decisiontreesregression':
		$('.datamining-attr ul.decisiontreesregression-attr').show();
		break;
	case 'als':
		$('.datamining-attr ul.als-attr').show();
		break;
	case 'discrete':
		$('.datamining-attr ul.discrete-attr').show();
		break;
	case 'quantify':
		$('.datamining-attr ul.quantify-attr').show();
		break;
	}
};
var getAttrs = function($trainType){
	var attrs = null;
	if($trainType == 'naivebayes'){
		attrs = bayesianAttrs();
	}
	if($trainType == 'linearregression'){
		attrs = linearRegressionAttrs();
	}
	if($trainType == 'logisticregression'){
		attrs = logisticRegressionAttrs();
	}
	if($trainType == 'ridgeregression'){
		attrs = ridgeregressionAttrs();
	}
	if($trainType == 'svm'){
		attrs = svmAttrs();
	}
	if($trainType == 'kmeans'){
		attrs = kmeansAttrs();
	}
	if($trainType == 'decisiontreesregression'){
		attrs = decisiontreesregressionAttrs();
	}
	if($trainType == 'decisiontreesclassifier'){
		attrs = decisiontreesclassifierAttrs();
	}
	if($trainType == 'als'){
		attrs = alsAttrs();
	}
	if($trainType == 'discrete'){
		attrs = discreteAttrs();
	}
	if($trainType == 'quantify'){
		attrs = quantifyAttrs();
	}
	return attrs;
}

//Double验证^\d+(\.\d*)?$（只能输入非负数）
var rgexp = new RegExp(/^\d+(\.\d*)?$/);
//Integer、Long验证^[0-9]*$（只能输入非零的正整数）
var rgexp2 = new RegExp(/^\+?[1-9][0-9]*$/);
//Integer、Long验证^\-[1-9][]0-9"*$（只能输入非零的负整数）
var rgexp3 = new RegExp(/^\-[1-9][0-9]*$/);
//Integer、Long验证^[0-9]*$（只能输入可为零的正整数）
var rgexp4 = new RegExp(/^\+?[0-9][0-9]*$/);
//朴素贝叶斯 属性信息
var bayesianAttrs = function(){
	var remark = $('.naivebayes-attr .remark').val().trim();
	var smoothing = $('.naivebayes-attr .smoothing').val().trim();
	var thresholds = $('.naivebayes-attr .thresholds').val().trim();
	var modelType = $('.naivebayes-attr .modelType').val().trim();
	if(!smoothing || !thresholds || !modelType){
		$.dialog("属性信息不能为空");
		return null;
	}
	
	var num1 = new Number(smoothing);
	if(isNaN(num1)){
		$.dialog("平滑参数只能输入小数或者整数");
		return null;
	}
	var num = [];
	num=thresholds.split(",");
		for(var i = 0;i<num.length;i++){
			if(!rgexp.test(num[i]) & !rgexp2.test(num[i])){
				$.dialog("阈值只能输入小数或正整数数组，用 逗号(,)隔开");
				return null;
			}
		}
	
	var bayesian = {};
	//备注
	bayesian['remark'] = remark;
	bayesian['smoothing'] = smoothing;
	bayesian['thresholds'] = thresholds;
	bayesian['modelType'] = modelType;
	
	return bayesian;
};

//线性回归  属性信息
var linearRegressionAttrs = function(){
	var remark = $('.linearRegression-attr .remark').val().trim();
	var elasticNetParam = $('.linearRegression-attr .elasticNetParam').val().trim();
	var fitIntercept = $('.linearRegression-attr .fitIntercept').val().trim();
	var maxIter = $('.linearRegression-attr .maxIter').val().trim();
	var regParam = $('.linearRegression-attr .regParam').val().trim();
	var solver = $('.linearRegression-attr .solver').val().trim();
	var standardization = $('.linearRegression-attr .standardization').val().trim();
	var tol = $('.linearRegression-attr .tol').val().trim();
	if(!elasticNetParam || !fitIntercept || !maxIter || !regParam || !solver || !standardization || !tol){
		$.dialog("属性信息不能为空");
		return null;
	}
	
	if(!rgexp.test(elasticNetParam)){
		$.dialog("弹性网参数只能输入非负数");
		return null;
	}
	if(!rgexp.test(regParam)){
		$.dialog("正则化参数只能输入非负数");
		return null;
	}
	var num = new Number(tol);
	if(isNaN(num.valueOf())){
		$.dialog("容忍度只能输入非负数");
		return null;
	}
	
	if(!rgexp4.test(maxIter)){
		$.dialog("最大迭代次数只能输入正整数");
		return null;
	}
	var linearRegression = {};
	//备注
	linearRegression['remark'] = remark
	linearRegression['elasticNetParam'] = elasticNetParam
	linearRegression['fitIntercept'] = fitIntercept
	linearRegression['maxIter'] = maxIter
	linearRegression['regParam'] = regParam
	linearRegression['solver'] = solver
	linearRegression['standardization'] = standardization
	linearRegression['tol'] = tol
	
	return linearRegression;
};

//逻辑回归  属性信息
var logisticRegressionAttrs = function(){
	var remark = $('.logisticRegression-attr .remark').val().trim();
	var elasticNetParam = $('.logisticRegression-attr .elasticNetParam').val().trim();
	var fitIntercept = $('.logisticRegression-attr .fitIntercept').val().trim();
	var maxIter = $('.logisticRegression-attr .maxIter').val().trim();
	var regParam = $('.logisticRegression-attr .regParam').val().trim();
	var standardization = $('.logisticRegression-attr .standardization').val().trim();
	var tol = $('.logisticRegression-attr .tol').val().trim();
	var thresholds = $('.logisticRegression-attr .thresholds').val().trim();
	if(!elasticNetParam || !fitIntercept || !maxIter || !regParam || !standardization || !tol || !thresholds){
		$.dialog("属性信息不能为空");
		return null;
	}
	
	if(!rgexp.test(elasticNetParam)){
		$.dialog("弹性网参数只能输入非负数");
		return null;
	}
	if(!rgexp.test(regParam)){
		$.dialog("正则化参数只能输入非负数");
		return null;
	}
	var num = new Number(tol);
	if(isNaN(num.valueOf())){
		$.dialog("容忍度只能输入非负数");
		return null;
	}
	
	if(!rgexp4.test(maxIter)){
		$.dialog("最大迭代次数只能输入正整数");
		return null;
	}
	
	var num = new Number(thresholds);
	if(isNaN(num.valueOf()) || num > 1 || num < 0){
		$.dialog("阈值只能是0~1之间的小数，包括0和1");
		return null;
	}
	
	var logisticRegression = {};
	//备注
	logisticRegression['remark'] = remark
	logisticRegression['elasticNetParam'] = elasticNetParam
	logisticRegression['fitIntercept'] = fitIntercept
	logisticRegression['maxIter'] = maxIter
	logisticRegression['regParam'] = regParam
	logisticRegression['standardization'] = standardization
	logisticRegression['tol'] = tol
	logisticRegression['thresholds'] = thresholds
	
	return logisticRegression;
}

//岭回归  属性信息
var ridgeregressionAttrs = function(){
	var remark = $('.ridgeregression-attr .remark').val().trim();
	var elasticNetParam = $('.ridgeregression-attr .elasticNetParam').val().trim();
	var fitIntercept = $('.ridgeregression-attr .fitIntercept').val().trim();
	var maxIter = $('.ridgeregression-attr .maxIter').val().trim();
	var regParam = $('.ridgeregression-attr .regParam').val().trim();
	var solver = $('.ridgeregression-attr .solver').val().trim();
	var standardization = $('.ridgeregression-attr .standardization').val().trim();
	var tol = $('.ridgeregression-attr .tol').val().trim();
	if(!elasticNetParam || !fitIntercept || !maxIter || !regParam || !solver || !standardization || !tol){
		$.dialog("属性信息不能为空");
		return null;
	}
	
	if(!rgexp.test(elasticNetParam)){
		$.dialog("弹性网参数只能输入非负数");
		return null;
	}
	if(!rgexp.test(regParam)){
		$.dialog("正则化参数只能输入非负数");
		return null;
	}
	var num = new Number(tol);
	if(isNaN(num.valueOf())){
		$.dialog("容忍度只能输入非负数");
		return null;
	}
	if(!rgexp4.test(maxIter)){
		$.dialog("最大迭代次数只能输入正整数");
		return null;
	}
	
	var ridgeregression = {};
	//备注
	ridgeregression['remark'] = remark
	ridgeregression['elasticNetParam'] = elasticNetParam
	ridgeregression['fitIntercept'] = fitIntercept
	ridgeregression['maxIter'] = maxIter
	ridgeregression['regParam'] = regParam
	ridgeregression['solver'] = solver
	ridgeregression['standardization'] = standardization
	ridgeregression['tol'] = tol
	
	return ridgeregression;
}

//支持向量机SVM类型  属性信息
var svmAttrs = function(){
	var remark = $('.svm-attr .remark').val().trim();
	var stepSize = $('.svm-attr .stepSize').val().trim();
	var numIterations = $('.svm-attr .numIterations').val().trim();
	var regParm = $('.svm-attr .regParm').val().trim();
	var miniBatchFraction = $('.svm-attr .miniBatchFraction').val().trim();
	if(!stepSize || !numIterations || !regParm || !miniBatchFraction){
		$.dialog("属性信息不能为空");
		return null;
	}
	
	if(!rgexp.test(stepSize)){
		$.dialog("迭代步长只能输入非负数");
		return null;
	}
	if(!rgexp.test(regParm)){
		$.dialog("正则化参数只能输入非负数");
		return null;
	}
	if(!rgexp.test(miniBatchFraction)){
		$.dialog("每次迭代参与计算的样本比例只能输入非负数");
		return null;
	}
	if(!rgexp4.test(numIterations)){
		$.dialog("迭代次数只能输入正整数");
		return null;
	}
	
	var svm = {};
	//备注
	svm['remark'] = remark
	svm['stepSize'] = stepSize
	svm['numIterations'] = numIterations
	svm['regParm'] = regParm
	svm['miniBatchFraction'] = miniBatchFraction
	
	return svm;
}

//K-means聚类类型  属性信息
var kmeansAttrs = function(){
	var remark = $('.kmeans-attr .remark').val().trim();
	//var initMode = $('.kmeans-attr .initMode').val();
	var initSteps = $('.kmeans-attr .initSteps').val().trim();
	var k = $('.kmeans-attr .k').val().trim();
	var maxIter = $('.kmeans-attr .maxIter').val().trim();
	var seed = $('.kmeans-attr .seed').val().trim();
	var tol = $('.kmeans-attr .tol').val().trim();
	if(!initSteps || !k || !maxIter || !seed || !tol){
		$.dialog("属性信息不能为空");
		return null;
	}
	if(!rgexp2.test(initSteps)){
		$.dialog("初始步长只能输入非零的正整数");
		return null;
	}
	if(!rgexp2.test(k)){
		$.dialog("聚类个数只能输入非零的正整数");
		return null;
	}
	if(!rgexp4.test(maxIter)){
		$.dialog("最大迭代次数只能输入正整数");
		return null;
	}
	if(!rgexp3.test(seed)){
		$.dialog("随机种子只能输入非零的负整数");
		return null;
	}
	var num = new Number(tol);
	if(isNaN(num.valueOf())){
		$.dialog("容忍度只能输入非负数");
		return null;
	}
	
	var kmeans = {};
	//备注
	kmeans['remark'] = remark
	//kmeans['initMode'] = initMode
	kmeans['initSteps'] = initSteps
	kmeans['k'] = k
	kmeans['maxIter'] = maxIter
	kmeans['seed'] = seed
	kmeans['tol'] = tol
	
	return kmeans;
}

//回归树类型  属性信息
var decisiontreesregressionAttrs = function(){
	var remark = $('.decisiontreesregression-attr .remark').val().trim();
	var impurity = $('.decisiontreesregression-attr .impurity').val().trim();
	var maxBins = $('.decisiontreesregression-attr .maxBins').val().trim();
	var maxDepth = $('.decisiontreesregression-attr .maxDepth').val().trim();
	if(!impurity || !maxBins || !maxDepth){
		$.dialog("属性信息不能为空");
		return null;
	}
	
	if(!rgexp2.test(maxBins)){
		$.dialog("最大划分数只能输入非零的正整数");
		return null;
	}
	if(!rgexp4.test(maxDepth)){
		$.dialog("决策树的最大深度只能输入正整数");
		return null;
	}
	
	var decisiontreesregression = {};
	//备注
	decisiontreesregression['remark'] = remark
	decisiontreesregression['impurity'] = impurity
	decisiontreesregression['maxBins'] = maxBins
	decisiontreesregression['maxDepth'] = maxDepth
	
	return decisiontreesregression;
}

//分类树类型  属性信息
var decisiontreesclassifierAttrs = function(){
	var remark = $('.decisiontreesclassifier-attr .remark').val().trim();
	var numClasses = $('.decisiontreesclassifier-attr .numClasses').val().trim();
	var impurity = $('.decisiontreesclassifier-attr .impurity').val().trim();
	var maxBins = $('.decisiontreesclassifier-attr .maxBins').val().trim();
	var maxDepth = $('.decisiontreesclassifier-attr .maxDepth').val().trim();
	if(!numClasses || !impurity || !maxBins || !maxDepth){
		$.dialog("属性信息不能为空");
		return null;
	}
	
	if(!rgexp2.test(maxBins)){
		$.dialog("最大划分数只能输入非零的正整数");
		return null;
	}
	if(!rgexp4.test(maxDepth)){
		$.dialog("决策树的最大深度只能输入正整数");
		return null;
	}
	
	var decisiontreesclassifier = {};
	//备注
	decisiontreesclassifier['remark'] = remark
	decisiontreesclassifier['numClasses'] = numClasses
	decisiontreesclassifier['impurity'] = impurity
	decisiontreesclassifier['maxBins'] = maxBins
	decisiontreesclassifier['maxDepth'] = maxDepth
	
	return decisiontreesclassifier;
}

//ALS推荐类型  属性信息
var alsAttrs = function(){
	var remark = $('.als-attr .remark').val().trim();
	var numBlocks = $('.als-attr .numBlocks').val().trim();
	var rank = $('.als-attr .rank').val().trim();
	var iterations = $('.als-attr .iterations').val().trim();
	var lambda = $('.als-attr .lambda').val().trim();
	var implicitPrefs = $('.als-attr .implicitPrefs').val().trim();
	var alpha = $('.als-attr .alpha').val().trim();
	if(!numBlocks || !rank || !iterations || !lambda || !implicitPrefs || !alpha){
		$.dialog("属性信息不能为空");
		return null;
	}
	
	if(!rgexp3.test(numBlocks)){
		$.dialog("块数只能输入非零的负整数");
		return null;
	}
	if(!rgexp2.test(rank)){
		$.dialog("隐语义因子的个数只能输入非零的正整数");
		return null;
	}
	if(!rgexp2.test(iterations)){
		$.dialog("迭代次数只能输入非零的正整数");
		return null;
	}
	if(!rgexp.test(lambda)){
		$.dialog("惩罚函数的因数只能输入非负数");
		return null;
	}
	if(!rgexp.test(alpha)){
		$.dialog("alpha只能输入非零的正整数");
		return null;
	}
	
	var als = {};
	//备注
	als['remark'] = remark
	als['numBlocks'] = numBlocks
	als['rank'] = rank
	als['iterations'] = iterations
	als['lambda'] = lambda
	als['implicitPrefs'] = implicitPrefs
	als['alpha'] = alpha
	
	return als;
}

//离散化  属性信息
var discreteAttrs = function(){
	var remark = $('.discrete-attr .remark').val().trim();
	var category = $('.discrete-attr .category').val().trim();
	
	if(!category){
		$.dialog("属性信息不能为空");
		return null;
	}
	
	if(!rgexp2.test(category)){
		$.dialog("种类只能输入非零的正整数");
		return null;
	}
	
	var discrete = {};
	//备注
	discrete['remark'] = remark
	discrete['category'] = category
	
	return discrete;
}

//量化  属性信息
var quantifyAttrs = function(){
	var remark = $('.quantify-attr .remark').val().trim();
	
	var quantify = {};
	//备注
	quantify['remark'] = remark
	
	return quantify;
}


//监听属性变化
$('.datamining-attr input, .datamining-attr select').unbind('change').change(function(){
	__changed = true;
});

/*$('.datamining-attr  .cls-num').unbind('keyup').keyup(function(){
	var $this = $(this);
	var maxLength = $this.attr('maxlength');
	var val = $this.val().trim(); 
	var num = new Number(val);
	if(isNaN(num)){
		$this.val( val.substr(0, val.length - 1) );
	}
});*/
