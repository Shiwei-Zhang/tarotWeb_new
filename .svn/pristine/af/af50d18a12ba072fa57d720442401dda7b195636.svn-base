$(function(){
	var baseUrl = 'http://localhost:800/';
	var conId = '';
	var templateId = '';
	var chartId = '';
	var $biMain = $('#bi-main');
	
	//will use
	var chartCommonAttr = {
		theme:'',

		titleShow: 0,//标题显示与否, 默认不显示
		titleText: 'untitled chart',
		titlePosition: 'center',//标题位置

		legendShow: 1,//图例是否显示,默认显示
		legendPosition: 'left',//图例位置

		labelShow: 0,//标签显示与否, 默认不显示
		labelPosition:  'top',//标签显示位置

		tooltipShow: 1,//提示框,默认显示

		toolboxShow:0,//工具栏是否显示, 默认显示
		toolboxOrient: 'horizontal',//工具栏布局朝向

		datazoomShow: 0,//区域缩放,默认不显示
		dataZoom:{
			type: 'slider'
		},

		visualmapShow: 0,//视觉映射是否显示, 默认不显示
		visualMap: {//默认值
			text: [ '高', '低'],
			calculable:'true',
			dimension:0,
			inRange:{
				color:['#50a3ba', '#eac736', '#d94e5d']
			}
		}
	};
	
	//TODO
	var theme = '';
	
	var titleShow = false;//标题显示与否, 默认不显示
	var titleText = 'untitled chart';
	var titlePosition = 'center';//标题位置
	
	var legendShow = 1;//图例是否显示,默认显示
	var legendPosition = 'left';//图例位置
	
	var labelShow = 0;//标签显示与否, 默认不显示
	var labelPosition = 'top';//标签显示位置
	
	var tooltipShow = 1;//提示框,默认显示
	
	var toolboxShow = 0;//工具栏是否显示, 默认显示
	var toolboxOrient = 'horizontal';//工具栏布局朝向
	
	var datazoomShow = 0;//区域缩放,默认不显示
	var dataZoom = {
			type: 'slider'
	};
	
	var visualmapShow  = 0;//视觉映射是否显示, 默认不显示
	//默认值
	var visualMap = {
			text: [ '高', '低'],
			calculable:'true',
			dimension:0,
			inRange:{
				color:['#50a3ba', '#eac736', '#d94e5d']
			}
	};
	
	//图表相关
	var xaxis = [], 
	yaxis = [],
	filter = null,
	orderBy = null,
	tableName = '';
	var chartType = '';
	var oldChartType = '';
	window.chartJson = null;

	//数据源事件
	$('.addPart').click(function(){
		//初始化
		rest4bi();
		 $('.bi-optionList').empty();//数据连接选择面板
		 $('.bi-mainList').empty();//数据表选择面板
		 $('.bi-connection').val('');
		
		$('.mask').show().css({"zIndex":"110"});
		showLoading();
		
		//获得连接信息
        var str='';
        $.ajax({
            url:baseUrl+'/selectDataConnectionAndPowerByUserId?userId=4',
            type:'POST',
            success:function(data) {
				if(!data){
					hideLoading();
					return ;
				}
                $( JSON.parse(data) ).each(function(index,item){
                    str+='<li id='+item["ID"]+'>'+item["NAME"]+'</li>';
                });
                str+='<li class="otherwise">other</li>';

                $('.optionList').append($(str));
                
                //显示数据源选择面板
                $('.bi-datasource').show().css({"zIndex":"120"});
        		$('.dataContainerA .mainList').css('overflowY', 'auto');
        		hideLoading();
            }
        });
	});
	//
	$('.bi-choose-connection').mouseover(function(){
		$('.bi-optionList').show();
	}).mouseout(function(event){
		$('.bi-optionList').hide();
	});
	//选择数据库并显示表
	$('.bi-optionList').on('click','li',function(){
		showLoading();
		$('.bi-connection').val($(this).html().trim());
		conId = $(this).prop('id');
	    $.ajax({
            url:baseUrl+'/selectValueAndTableByConId'+'?conId=' + conId,
            type:'POST',
            success:function(data) {
            	$('.bi-optionList').hide();
            	if(!data){//无表数据
            		$('.bi-mainList').empty();
            		console.log('暂无数据');
            		hideLoading();
            		return ;
            	}
				var dataJson = JSON.parse(data );
            	var tableName = dataJson.tableName;
				if( !tableName ){
					$('.bi-mainList').empty();
					console.log('暂无表数据');
					hideLoading();
					return ;
				}
                //console.log(tableName)
            	var str = '';
                for(var i=0;i<tableName.length;i++){
                    str+='<li><i class="single"></i><span>'+tableName[i]+'</span></li>';
                }
                $('.bi-mainList').empty().html( $( str ) );

                //添加选中事件
                $('.bi-mainList li').unbind('click').click(function(e){
                	e=e||window.event;
            		var tar= e.target|| e.srcElement;
            		if(tar.tagName.toLowerCase()==='i'&& $(tar).hasClass('single')){
            			if($(tar).hasClass('singleChecked')){
            				$(tar).removeClass('singleChecked').removeClass('bi-singleChecked');
            			}else {
            				$('.bi-mainList li i').removeClass('singleChecked').removeClass('bi-singleChecked');
            				$(tar).addClass('singleChecked').addClass('bi-singleChecked');
            			}
            		}
                });
                
                hideLoading();
            }
        });
		$('.bi-optionList').hide();
		if($('.bi-connection').val()==='other'){
			//nothing to do.
		}
	})
	//编辑面板关闭
	$('.bi-close1').click(function(){
		$('.biData').hide();
		$('.mask').css({"zIndex":"100"}).hide();
	});
	//取消或者关闭数据源面板
	$('.bi-close2, .bi-cancel').click(function(){
		$('.bi-datasource').hide();
		$('.mask').show().css({"zIndex":"100"});
	});
	//确认选表
	$('.bi-sure').click(function(){
		$('.bi-datasource').hide();
		showLoading();
		//保存选择的表
		var nextEle = $('.bi-singleChecked').next();
		if(nextEle && nextEle.length > 0){
			tableName = nextEle.html().trim();
			renderColumns();
		}
	});
	
	//选择图例
	$('.legend').click(function(){
		if($(this).hasClass('bi-chartSelected')){
			return ;
		}
		$('.legend').removeAttr('style').removeClass('bi-chartSelected');
		$(this).css({'border':'1px red solid'});
		$(this).addClass('bi-chartSelected');
		
		//显示个性属性
		chartType = $(this).data('type');
		//TODO 根据不同的chart展示不同的属性
	});
	
	//生成图表
	$('.bi-generator').click(function(){
		var dimensionality = $('.bi-dimensionality li');
		var measure = $('.bi-measure li');
		var legend = $('.legend.bi-chartSelected');//
		
		if(dimensionality && dimensionality.length > 0 &&
				measure && measure.length > 0 && legend){
			xaxis = [];
			dimensionality.each(function(index, item){
				xaxis.push($(item).text());
			});
			yaxis = [];
			measure.each(function(index, item){
				yaxis.push($(item).text());
			});
			chartType = legend.data('type');
			
			if(!chartType || !conId || !tableName || xaxis.length < 1 || yaxis.length < 1){
				console.log('data is error.');
				return ;
			}
			
			$.ajax({
	            url:baseUrl+'/bi/getEchartJSONInEdit',
	            type:'POST',
	            data:{
	            	conId: conId,
	            	tableName:tableName,
	            	chartType: chartType,
	            	xaxis: xaxis,
	            	yaxis: yaxis
	            },
	            success:function(data) {
	            	if(data){
						data = JSON.parse( data );
	            		var myChart = echarts.init($biMain[0], theme);
	            		myChart.clear();//清空组件
	            		oldChartType = chartType;
	            		//TODO
	            		if(chartType == 'table'){
	        				Table.buildTable(data['chartJson'], 'bi-main');
	        			}else if(chartType == 'droplist'){
	        				Variable.buildDroplist(data['chartJson'], 'bi-main');
	        			}else if(chartType == 'input'){
	        				Variable.buildInput(data, 'bi-main');
	        			}else{
	        				myChart.setOption(setChartJson(data['chartJson']));
	        				myChart.on('click', function (params) {
	        					    
	        				});
	        			}
	            	}
	            }
	        });
		}
	});
	//保存当前编辑chart
	$('.bi-save').click(function(e){
		//当前是否存在chart
		if(!chartJson){
			return;
		}
		
		var dataParams = {};
		//1.维度
		dataParams.xaxis = xaxis.join(',');
		//2.量度
		dataParams.yaxis = yaxis.join(',');
		//3.图表类型
		dataParams.chartType = chartType;
		//4.属性配置
		//4.1过滤
		dataParams.filter = filter;
		//4.2排序
		dataParams.orderBy = orderBy
		//4.3主题
		dataParams.theme = theme;
		//4.4标题
		dataParams.title = JSON.stringify({
			show:  titleShow,
			text:  titleText,
			position: titlePosition
		});
		//4.5图例
		dataParams.legend = JSON.stringify({
			show:  legendShow,
			position:  legendPosition
		});
		//4.6标签
		dataParams.label = JSON.stringify({
			show:  labelShow,
			position:  labelPosition
		});
		//4.7提示框
		dataParams.tooltip =  tooltipShow;
		//4.8工具栏
		dataParams.toolbox = JSON.stringify({
			show:  toolboxShow,
			orient: toolboxOrient
		});
		//4.9区域缩放
		dataParams.datazoom = datazoomShow;
		//4.10视觉映射
		dataParams.visualMap = JSON.stringify({
			show: visualmapShow,
			dimension: visualMap.dimension,
			text: visualMap.text.join(','),
			color: visualMap.inRange.color.join(',')
		});
		
		dataParams.tableName = tableName;
		dataParams.conId = conId;
		dataParams.templateId = templateId;//TODO templateId 会通过父层传递进来
		
		//true即是编辑已存在的chart
		if(chartId){
			dataParams.chartId = chartId;
			updateChartData(dataParams);
			return ;
		}
		
		$.ajax({
			url: baseUrl +'/bi/saveEchartDataInEdit',
			data: dataParams,
			type:'POST',
			success:function(data){
				//初始化浮层数据
				//TODO init layer...
				rest4bi();
				$('.mask').hide();
				$('.biData').hide();
				if(data){
					data = JSON.parse(data);//chart
					//TODO update father's layer
				}
			}
		});
	});
	//重置选项
	$('.bi-reset').click(function(){
		rest4bi();
	});

	//TODO 编辑当前chart
	$('.bi-edit').unbind('click').click(function(e){

		conId = $(this).data('conid');
		templateId = $(this).data('templateid');
		chartId = $(this).data('chartid');
		if( !conId || !templateId || !chartId ){
			console.log('当前chart不存在.');
			return ;
		}
		showLoading();

		//获得当前chart对象
		$.ajax({
			url:baseUrl+'/bi/getEchartJSONByIds',
			type:'POST',
			data:{
				chartId: chartId,
				templateId: templateId
			},
			success:function(data) {
				if(data){
					data = JSON.parse( data );

					//设置页面全局属性
					chartCommonAttr = data.chartCommonAttr;
					theme = chartCommonAttr.theme;
					chartType = data.chartType;
					xaxis = data.xaxis;
					yaxis = data.yaxis;
					tableName = data.tableName;
					filter = data.filter;
					orderBy = data.orderBy;
					//--

					var myChart = echarts.init($biMain[0], theme);
					myChart.clear();//清空组件
					//TODO
					if(chartType == 'table'){
						Table.buildTable(data['chartJson'], 'bi-main');
					}else if(chartType == 'droplist'){
						Variable.buildDroplist(data['chartJson'], 'bi-main');
					}else if(chartType == 'input'){
						Variable.buildInput(data, 'bi-main');
					}else{
						myChart.setOption(setChartJson(data['chartJson']));

						//初始化界面
						init(templateId, chartId);
					}
				}
				hideLoading();
			}
		});
	});
	//echart 属性配置
	//1.主题
	$('.bi-theme select').change(function(){
		theme = $(this).val();
		echarts.init($biMain[0], theme).setOption(chartJson);
	});

	//2.标题
	$('.bi-title input[name="show"]').change(function(){
		titleShow = $(this).val();
		if(titleShow == 1 && chartJson){
			chartJson.title.show = true;
			chartJson.title.text = titleText;
			chartJson.title.left = titlePosition;
			echarts.init($biMain[0], theme).setOption(chartJson);
		}else if(titleShow == 0 && chartJson){
			chartJson.title.show = false;
			echarts.init($biMain[0], theme).setOption(chartJson);
		}
	});
	$('.bi-title input[name="text"]').change(function(){
		var titleText_ = $(this).val();
		if(titleShow == 1 && titleText_ && chartJson){
			titleText = titleText_;
			chartJson.title.show = true;
			chartJson.title.text = titleText;
			chartJson.title.left = titlePosition;
			echarts.init($biMain[0], theme).setOption(chartJson);
		}
	});
	$('.bi-title select[name="position"]').change(function(){
		var titlePosition_ = $(this).val();
		if(titleShow == 1 && titlePosition_ && chartJson){
			titlePosition = titlePosition_;
			chartJson.title.text = titleText;
			chartJson.title.left = titlePosition;
			echarts.init($biMain[0], theme).setOption(chartJson);
		}
	});
	
	//3.图例
	$('.bi-legend input[name="lshow"]').change(function(){
		legendShow = $(this).val();
		if(legendShow == 1 && chartJson){
			chartJson.legend.show = true;
			chartJson.legend.left = legendPosition;
			echarts.init($biMain[0], theme).setOption(chartJson);
		}else if(legendShow == 0 && chartJson){
			chartJson.legend.show = false;
			echarts.init($biMain[0], theme).setOption(chartJson);
		}
	});
	$('.bi-legend select[name="lposition"]').change(function(){
		var legendPosition_ = $(this).val();
		if(legendShow == 1 && legendPosition_ && chartJson){
			legendPosition = legendPosition_;
			chartJson.legend.left = legendPosition;
			echarts.init($biMain[0], theme).setOption(chartJson);
		}
	});
	
	//4.标签
	$('.bi-label input[name="lbshow"]').change(function(){
		labelShow = $(this).val();
		if(labelShow == 1 && chartJson){
			for(var i = 0; i < chartJson.series.length; i ++){
				var sery = chartJson.series[i];
				sery.label.normal.show = true;
				sery.label.emphasis.show = true;

				sery.label.normal.position = labelPosition;
				sery.label.emphasis.position = labelPosition;
			}
			echarts.init($biMain[0], theme).setOption(chartJson);
		}else if(labelShow == 0 && chartJson){
			for(var i = 0; i < chartJson.series.length; i ++){
				var sery = chartJson.series[i];
				sery.label.normal.show = false;
				sery.label.emphasis.show = false;
			}
			echarts.init($biMain[0], theme).setOption(chartJson);
		}
	});
	$('.bi-label select[name="lbposition"]').change(function(){
		var labelPosition_ = $(this).val();
		if(labelShow == 1 && labelPosition_ && chartJson){
			labelPosition = labelPosition_;
			for(var i = 0; i < chartJson.series.length; i ++){
				var sery = chartJson.series[i];
				sery.label.normal.position = labelPosition;
				sery.label.emphasis.position = labelPosition;
			}
			echarts.init($biMain[0], theme).setOption(chartJson);
		}
	});
	
	//5.提示框
	$('.bi-tooltip input[name="ttshow"]').change(function(){
		tooltipShow = $(this).val();
		if(tooltipShow == 1 && chartJson){
			chartJson.tooltip.show = true;
			echarts.init($biMain[0], theme).setOption(chartJson);
		}else if(tooltipShow == 0 && chartJson){
			chartJson.tooltip.show = false;
			echarts.init($biMain[0], theme).setOption(chartJson);
		}
	});
	
	//6.工具栏
	$('.bi-toolbox input[name="tbshow"]').change(function(){
		toolboxShow = $(this).val();
		if(toolboxShow == 1 && chartJson){
			chartJson.toolbox.show = true;
			chartJson.toolbox.orient = toolboxOrient;
			echarts.init($biMain[0], theme).setOption(chartJson);
		}else if(toolboxShow == 0 && chartJson){
			chartJson.toolbox.show = false;
			echarts.init($biMain[0], theme).setOption(chartJson);
		}
	});
	$('.bi-toolbox select[name="tborient"]').change(function(){
		var toolboxOrient_ = $(this).val();
		if(toolboxShow == 1 && toolboxOrient_ && chartJson){
			toolboxOrient = toolboxOrient_;
			chartJson.toolbox.orient = toolboxOrient;
			echarts.init($biMain[0], theme).setOption(chartJson);
		}
	});
	
	//7.区域缩放 --坐标轴特有
	$('.bi-datazoom input[name="dzshow"]').change(function(){
		datazoomShow = $(this).val();
		if(datazoomShow == 1 && chartJson){
			try{
				chartJson.dataZoom.push(dataZoom);
				echarts.init($biMain[0], theme).setOption(chartJson);
			} catch(e){
				console.log(e);
				datazoomShow = 0;
				chartJson.dataZoom = [];
				echarts.init($biMain[0], theme).setOption(chartJson);
			}
			
		}else if(datazoomShow == 0 && chartJson){
			chartJson.dataZoom = [];
			echarts.init($biMain[0], theme).setOption(chartJson);
		}
	});
	
	//8.视觉映射
	$('.bi-visualmap input[name="vmshow"]').change(function(){
		visualmapShow = $(this).val();
		if(visualmapShow == 1 && chartJson){
			chartJson.visualMap = [];
			chartJson.visualMap.push(visualMap);
			echarts.init($biMain[0], theme).setOption(chartJson);
		}else if(visualmapShow == 0 && chartJson){
			chartJson.visualMap = [];
			echarts.init($biMain[0], theme).setOption(chartJson);
		}
	});
	$('.bi-visualmap input[name="dimension"]').change(function(){
		var dimension = $(this).val();
		if(visualmapShow == 1 && dimension && chartJson){
			visualMap.dimension = dimension;
			chartJson.visualMap = [];
			chartJson.visualMap.push(visualMap);
			echarts.init($biMain[0], theme).setOption(chartJson);
		}else{
			visualMap.dimension = dimension?dimension : 0;
		}
	});
	$('.bi-visualmap-text').blur(function(){
		var height = $($('.bi-visualmap-text')[0]).val();
		var low = $($('.bi-visualmap-text')[1]).val();
		height = height? height : '高';
		low = low? low:'低';
		visualMap.text = [height, low];
		if(visualmapShow == 1){
			chartJson.visualMap = [];
			chartJson.visualMap.push(visualMap);
			echarts.init($biMain[0], theme).setOption(chartJson);
		}else{
			visualMap.text = [height, low];
		}
		
	});
	$('.bi-visualmap-inrange').blur(function(){
		var inrangeColor = $(this).val();//,隔开
		if(visualmapShow == 1){
			if(inrangeColor){
				visualMap.inRange.color = inrangeColor.split(',')
				chartJson.visualMap = [];
				chartJson.visualMap.push(visualMap);
				echarts.init($biMain[0], theme).setOption(chartJson);
			}else{
				chartJson.visualMap = [];
				chartJson.visualMap.push(visualMap);
				echarts.init($biMain[0], theme).setOption(chartJson);
			}
		}else{
			if(inrangeColor){
				visualMap.inRange.color = inrangeColor.split(',')
			}
		}
	});
	//end
	
	
	//方法集合
	//初始化BI编辑页面
	var init = function(templateId, chartId){
		$('.bi-list').empty();//字段列表
		templateId = templateId;

		if(!chartId){
			return;
		}
		//初始化已存在的CHART编辑页面
		//1.初始化字段面板
		renderColumns();

		//2.初始化维度,量度, 图表类型
		for(var i = 0; i < xaxis.length; i ++){
			$('.bi-dimensionality').append($( "<li></li>" ).append( $('<span>'+ xaxis[i] + '</span><i class="closeA bi-column-close"></i>') ));
			deleteDroppabledColumn();
		}

		for(var i = 0; i < yaxis.length; i ++){
			$('.bi-measure').append( $( "<li></li>" ).append( $('<span>'+ yaxis[i] + '</span><i class="closeA bi-column-close"></i>') ) );
			deleteDroppabledColumn();
		}
		

		//3.初始化属性
		//3.1初始化排序
		//TODO
		//3.2初始化过滤
		//TODO
		//3.3初始化chart属性
		initAttributeUI();
	};
	
	//初始化页面
	init(1);
	
	//更新chart
	var updateChartData = function(dataParams){
		$.ajax({
			url: baseUrl +'/bi/updateChartData',
			data: dataParams,
			type:'POST',
			success:function(data){
				//初始化浮层数据
				//TODO init layer...
				rest4bi();
				$('.mask').hide();
				$('.biData').hide();
				if(data){
					data = JSON.parse(data);//chart
					//TODO update father's layer
				}
			}
		});
	}
	
	//重置页面属性
	var rest4bi = function(){
		//数据源相关重置
		$('.bi-dimensionality').empty();
		$('.bi-measure').empty();
		$('.legend').removeAttr('style');
		
		//reset attributes
		$('#bi-form')[0].reset();//表单重置
		
		//chart reset
		chartJson = '';
		theme = '';
		chartType = '';
		echarts.init($biMain[0]).clear();
	};

	var renderColumns = function(){
		$.ajax({
			url:baseUrl+'/selectTableColumn',
			type:'POST',
			data:{
				conId: conId,
				tableName:tableName
			},
			success:function(data) {
				if(data){
					data = JSON.parse( data );
					//获得column数据
					var columnObjects = data.table[tableName];
					if(columnObjects){
						var columnDom = '';
						for(var i = 0; i < columnObjects.length; i ++){
							var columnObject = columnObjects[i];
							columnDom += '<li>' + columnObject.column + '&nbsp;&nbsp;(' + columnObject.parameter[0]+ ')</li>';
						}
						//渲染 字段
						$('.bi-list').html( $(columnDom) );


						//绑定拖放事件
						droppable4Columns();
					}
				}

				$('.mask').show().css({"zIndex":"100"});
				hideLoading();
			}
		});
	}

	var droppable4Columns = function(){
		//这里是字段列表, 维度列表, 量度列表
		var $columnList = $('.bi-list'),
		$dimensionality = $('.bi-dimensionality'),
		$measure = $('.bi-measure');
		
		 //让字段列表的条目可拖拽
	    $( "li", $columnList ).draggable({
	      cancel: "a.ui-icon", // 点击一个图标不会启动拖拽
	      revert: "invalid", // 当未被放置时，条目会还原回它的初始位置
	      containment: "document",
	      helper: "clone",
	      cursor: "move",
	      start: function( event, ui ) {
	    	  //处理拖动的对象的文本,背景颜色
	    	  ui.helper.text(ui.helper.text().split('(')[0].trim());
	    	  ui.helper.css({'background-color':'#f3f3f3'});
	      }
	    });
	    
	    //让 维度列表可放置，接受字段列表的条目
	    $dimensionality.droppable({
	      accept: ".bi-list > li",
	      activeClass: "ui-state-highlight",
	      drop: function( event, ui ) {
	    	  //处置被拖动的元素放置时
	    	  var $item = ui.draggable;
	    	  var text = $item.text().split('(')[0].trim();
	    	  $( "<li></li>" ).append( $('<span>'+ text + '</span><i class="closeA bi-column-close"></i>') ).appendTo( this );
	    	  
	    	  $( '.bi-column-close' ).unbind( 'click' ).click(function(e){
	    		  $(this).parent().remove();
	    	  });
	      }
	    });
	    //让 量度列表可放置，接受字段列表的条目
	    $measure.droppable({
	      accept: ".bi-list > li",
	      activeClass: "ui-state-highlight",
	      drop: function( event, ui ) {
	    	  //处置被拖动的元素放置时
	    	  var $item = ui.draggable;
	    	  var text = $item.text().split('(')[0].trim();
	    	  $( "<li></li>" ).append( $('<span>'+ text + '</span><i class="closeA bi-column-close"></i>') ).appendTo( this );
	    	  
	    	  $('.bi-column-close').unbind('click').click(function(e){
	    		  $(this).parent().remove();
	    	  });
	      }
	    });
	};

	var deleteDroppabledColumn = function(){
		//TODO 添加删除事件
	}

	var setChartJson = function($chartJson){
		if(!chartJson){
			chartJson = $chartJson;
			return chartJson;
		}
		
		chartJson = $chartJson;
		//2.setting title
		if(titleShow){
			chartJson.title.show = true;
			chartJson.title.text = titleText;
			if(titlePosition){
				chartJson.title.left = titlePosition
			}
		}
		//3.setting legend
		if(legendShow){
			chartJson.legend.show = true;
			if(legendPosition){
				chartJson.legend.left = legendPosition
			}
		}
		//4.setting label
		if(labelShow){
			for(var i = 0; i < chartJson.series.length; i ++){
				var sery = chartJson.series[i];
				sery.label.normal.show = true;
				sery.label.emphasis.show = true;
				if(labelPosition){
					sery.label.normal.position = labelPosition;
					sery.label.emphasis.position = labelPosition;
				}
			}
		}
		//5.setting tooltip
		if(tooltipShow){
			window.chartJson.toolbox.show = true;
			if(toolboxOrient){
				window.chartJson.toolbox.orient = toolboxOrient;
			}
		}
		//6.setting toolbox
		if(toolboxShow){
			chartJson.toolbox.show = true;
			if(toolboxOrient){
				chartJson.toolbox.orient = toolboxOrient;
			}
		}
		//7.setting datazoom
		if(datazoomShow){
			chartJson.dataZoom.push(dataZoom);
		}
		//8.setting visualmap
		if(visualmapShow){
			chartJson.visualMap.push(visualMap);
		}
		
		return chartJson;
	}
	
	//generate filter sentence
	var getFilter = function(){
		//TODO generating filter sentence via filter attribute.
		return filter;
	};

	//初始化属性面板
	var initAttributeUI = function(){
		//TODO
		//1.title
		titleShow = chartCommonAttr.titleShow?1:0;
		titlePosition = chartCommonAttr.titleLeft;
		titleText = chartCommonAttr.titleText;
		//页面title

		//2.legend
		legendShow = chartCommonAttr.legendShow?1:0;
		legendPosition = chartCommonAttr.legendLeft;
		//页面legend

		//3.label
		labelShow = chartCommonAttr.labelShow?1:0;
		labelPosition = chartCommonAttr.labelPosition;
		//页面label

		//4.tooltip
		tooltipShow = chartCommonAttr.tooltipShow?1:0;
		//页tooltip

		//5.toolbox
		toolboxShow = chartCommonAttr.toolboxShow?1:0;
		toolboxOrient = chartCommonAttr.toolboxOrient;
		//页面toolbox

		//6.datazoom
		datazoomShow = chartCommonAttr.datazoomShow?1:0;
		//页面datazoom

		//7.visualmap
		visualmapShow = chartCommonAttr.visualmapShow?1:0;
		var visualmapText = chartCommonAttr.visualmapText;
		var visualmapDimension = chartCommonAttr.visualmapDimension;
		var visualmapinrangeColor = chartCommonAttr.visualmapinrangeColor
		if(visualmapText){
			visualMap.text = visualmapText.split(',');
		}
		if(visualmapDimension){
			visualMap.dimension = parseInt(visualmapDimension);
		}
		if(visualmapinrangeColor){
			visualMap.inRange.color = visualmapinrangeColor.split(',');
		}
		//页面visualmap
	}

	//TODO deleting ...
	var showLoading = function(){
		$('.u-layer2').show().css({'top':'300px', 'left':$(window).width()/2 + 'px'});
	};
	var hideLoading = function(){
		$('.u-layer2').hide();
	}
});

var commJS = {
		getCookie: function(name){
			var cookieStr = document.cookie;
			if(cookieStr && cookieStr.length > 0 && cookieStr.indexOf(name) > -1){
				return cookieStr.split(name + '=')[1].split(';')[0];
			}
			return null;
		}
}